Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    caracter
    ellipsis
    inteiro
    logico
    real

Grammar

Rule 0     S' -> axioma
Rule 1     axioma -> Inicio code Fim
Rule 2     code -> S
Rule 3     code -> code ; S
Rule 4     S -> C
Rule 5     condicao -> se E entao c_list senao c_list fim_se
Rule 6     C -> E
Rule 7     C -> condicao
Rule 8     C -> escreva ( e_list ) ;
Rule 9     C -> leia ( var ) ;
Rule 10    C -> var atribui E ;
Rule 11    C -> para var de E ate E { c_list }
Rule 12    e_list -> E
Rule 13    e_list -> e_list , E
Rule 14    c_list -> C
Rule 15    c_list -> c_list ; C
Rule 16    N -> nr
Rule 17    N -> E + E
Rule 18    N -> E - E
Rule 19    N -> E * E
Rule 20    N -> E / E
Rule 21    N -> E < E
Rule 22    N -> E > E
Rule 23    N -> cos ( E )
Rule 24    N -> sen ( E )
Rule 25    B -> F
Rule 26    B -> E e E
Rule 27    B -> E ou E
Rule 28    F -> verdadeiro
Rule 29    F -> falso
Rule 30    F -> nao F
Rule 31    F -> nao var
Rule 32    E -> var
Rule 33    E -> ( E )
Rule 34    E -> B
Rule 35    E -> N
Rule 36    E -> string
Rule 37    E -> var ( e_list )
Rule 38    E -> var ( )
Rule 39    args -> <empty>
Rule 40    args -> var_list
Rule 41    var_list -> var
Rule 42    var_list -> var_list , var
Rule 43    arg_list -> E
Rule 44    arg_list -> arg_list , E

Terminals, with rules where they appear

(                    : 8 9 23 24 33 37 38
)                    : 8 9 23 24 33 37 38
*                    : 19
+                    : 17
,                    : 13 42 44
-                    : 18
/                    : 20
;                    : 3 8 9 10 15
<                    : 21
>                    : 22
Fim                  : 1
Inicio               : 1
ate                  : 11
atribui              : 10
caracter             : 
cos                  : 23
de                   : 11
e                    : 26
ellipsis             : 
entao                : 5
error                : 
escreva              : 8
falso                : 29
fim_se               : 5
inteiro              : 
leia                 : 9
logico               : 
nao                  : 30 31
nr                   : 16
ou                   : 27
para                 : 11
real                 : 
se                   : 5
sen                  : 24
senao                : 5
string               : 36
var                  : 9 10 11 31 32 37 38 41 42
verdadeiro           : 28
{                    : 11
}                    : 11

Nonterminals, with rules where they appear

B                    : 34
C                    : 4 14 15
E                    : 5 6 10 11 11 12 13 17 17 18 18 19 19 20 20 21 21 22 22 23 24 26 26 27 27 33 43 44
F                    : 25 30
N                    : 35
S                    : 2 3
arg_list             : 44
args                 : 
axioma               : 0
c_list               : 5 5 11 15
code                 : 1 3
condicao             : 7
e_list               : 8 13 37
var_list             : 40 42

Parsing method: LALR

state 0

    (0) S' -> . axioma
    (1) axioma -> . Inicio code Fim

    Inicio          shift and go to state 2

    axioma                         shift and go to state 1

state 1

    (0) S' -> axioma .



state 2

    (1) axioma -> Inicio . code Fim
    (2) code -> . S
    (3) code -> . code ; S
    (4) S -> . C
    (6) C -> . E
    (7) C -> . condicao
    (8) C -> . escreva ( e_list ) ;
    (9) C -> . leia ( var ) ;
    (10) C -> . var atribui E ;
    (11) C -> . para var de E ate E { c_list }
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (5) condicao -> . se E entao c_list senao c_list fim_se
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    escreva         shift and go to state 8
    leia            shift and go to state 10
    var             shift and go to state 11
    para            shift and go to state 12
    (               shift and go to state 9
    string          shift and go to state 15
    se              shift and go to state 16
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    code                           shift and go to state 3
    S                              shift and go to state 4
    C                              shift and go to state 5
    E                              shift and go to state 6
    condicao                       shift and go to state 7
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 3

    (1) axioma -> Inicio code . Fim
    (3) code -> code . ; S

    Fim             shift and go to state 24
    ;               shift and go to state 25


state 4

    (2) code -> S .

    Fim             reduce using rule 2 (code -> S .)
    ;               reduce using rule 2 (code -> S .)


state 5

    (4) S -> C .

    Fim             reduce using rule 4 (S -> C .)
    ;               reduce using rule 4 (S -> C .)


state 6

    (6) C -> E .
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    Fim             reduce using rule 6 (C -> E .)
    ;               reduce using rule 6 (C -> E .)
    senao           reduce using rule 6 (C -> E .)
    fim_se          reduce using rule 6 (C -> E .)
    }               reduce using rule 6 (C -> E .)
    e               shift and go to state 26
    ou              shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    <               shift and go to state 32
    >               shift and go to state 33


state 7

    (7) C -> condicao .

    Fim             reduce using rule 7 (C -> condicao .)
    ;               reduce using rule 7 (C -> condicao .)
    senao           reduce using rule 7 (C -> condicao .)
    fim_se          reduce using rule 7 (C -> condicao .)
    }               reduce using rule 7 (C -> condicao .)


state 8

    (8) C -> escreva . ( e_list ) ;

    (               shift and go to state 34


state 9

    (33) E -> ( . E )
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 35
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 10

    (9) C -> leia . ( var ) ;

    (               shift and go to state 37


state 11

    (10) C -> var . atribui E ;
    (32) E -> var .
    (37) E -> var . ( e_list )
    (38) E -> var . ( )

    atribui         shift and go to state 38
    e               reduce using rule 32 (E -> var .)
    ou              reduce using rule 32 (E -> var .)
    +               reduce using rule 32 (E -> var .)
    -               reduce using rule 32 (E -> var .)
    *               reduce using rule 32 (E -> var .)
    /               reduce using rule 32 (E -> var .)
    <               reduce using rule 32 (E -> var .)
    >               reduce using rule 32 (E -> var .)
    Fim             reduce using rule 32 (E -> var .)
    ;               reduce using rule 32 (E -> var .)
    senao           reduce using rule 32 (E -> var .)
    fim_se          reduce using rule 32 (E -> var .)
    }               reduce using rule 32 (E -> var .)
    (               shift and go to state 39


state 12

    (11) C -> para . var de E ate E { c_list }

    var             shift and go to state 40


state 13

    (34) E -> B .

    e               reduce using rule 34 (E -> B .)
    ou              reduce using rule 34 (E -> B .)
    +               reduce using rule 34 (E -> B .)
    -               reduce using rule 34 (E -> B .)
    *               reduce using rule 34 (E -> B .)
    /               reduce using rule 34 (E -> B .)
    <               reduce using rule 34 (E -> B .)
    >               reduce using rule 34 (E -> B .)
    Fim             reduce using rule 34 (E -> B .)
    ;               reduce using rule 34 (E -> B .)
    )               reduce using rule 34 (E -> B .)
    entao           reduce using rule 34 (E -> B .)
    ,               reduce using rule 34 (E -> B .)
    ate             reduce using rule 34 (E -> B .)
    senao           reduce using rule 34 (E -> B .)
    {               reduce using rule 34 (E -> B .)
    fim_se          reduce using rule 34 (E -> B .)
    }               reduce using rule 34 (E -> B .)


state 14

    (35) E -> N .

    e               reduce using rule 35 (E -> N .)
    ou              reduce using rule 35 (E -> N .)
    +               reduce using rule 35 (E -> N .)
    -               reduce using rule 35 (E -> N .)
    *               reduce using rule 35 (E -> N .)
    /               reduce using rule 35 (E -> N .)
    <               reduce using rule 35 (E -> N .)
    >               reduce using rule 35 (E -> N .)
    Fim             reduce using rule 35 (E -> N .)
    ;               reduce using rule 35 (E -> N .)
    )               reduce using rule 35 (E -> N .)
    entao           reduce using rule 35 (E -> N .)
    ,               reduce using rule 35 (E -> N .)
    ate             reduce using rule 35 (E -> N .)
    senao           reduce using rule 35 (E -> N .)
    {               reduce using rule 35 (E -> N .)
    fim_se          reduce using rule 35 (E -> N .)
    }               reduce using rule 35 (E -> N .)


state 15

    (36) E -> string .

    e               reduce using rule 36 (E -> string .)
    ou              reduce using rule 36 (E -> string .)
    +               reduce using rule 36 (E -> string .)
    -               reduce using rule 36 (E -> string .)
    *               reduce using rule 36 (E -> string .)
    /               reduce using rule 36 (E -> string .)
    <               reduce using rule 36 (E -> string .)
    >               reduce using rule 36 (E -> string .)
    Fim             reduce using rule 36 (E -> string .)
    ;               reduce using rule 36 (E -> string .)
    )               reduce using rule 36 (E -> string .)
    entao           reduce using rule 36 (E -> string .)
    ,               reduce using rule 36 (E -> string .)
    ate             reduce using rule 36 (E -> string .)
    senao           reduce using rule 36 (E -> string .)
    {               reduce using rule 36 (E -> string .)
    fim_se          reduce using rule 36 (E -> string .)
    }               reduce using rule 36 (E -> string .)


state 16

    (5) condicao -> se . E entao c_list senao c_list fim_se
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 41
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 17

    (25) B -> F .

    e               reduce using rule 25 (B -> F .)
    ou              reduce using rule 25 (B -> F .)
    +               reduce using rule 25 (B -> F .)
    -               reduce using rule 25 (B -> F .)
    *               reduce using rule 25 (B -> F .)
    /               reduce using rule 25 (B -> F .)
    <               reduce using rule 25 (B -> F .)
    >               reduce using rule 25 (B -> F .)
    Fim             reduce using rule 25 (B -> F .)
    ;               reduce using rule 25 (B -> F .)
    )               reduce using rule 25 (B -> F .)
    entao           reduce using rule 25 (B -> F .)
    ,               reduce using rule 25 (B -> F .)
    ate             reduce using rule 25 (B -> F .)
    senao           reduce using rule 25 (B -> F .)
    {               reduce using rule 25 (B -> F .)
    fim_se          reduce using rule 25 (B -> F .)
    }               reduce using rule 25 (B -> F .)


state 18

    (16) N -> nr .

    e               reduce using rule 16 (N -> nr .)
    ou              reduce using rule 16 (N -> nr .)
    +               reduce using rule 16 (N -> nr .)
    -               reduce using rule 16 (N -> nr .)
    *               reduce using rule 16 (N -> nr .)
    /               reduce using rule 16 (N -> nr .)
    <               reduce using rule 16 (N -> nr .)
    >               reduce using rule 16 (N -> nr .)
    Fim             reduce using rule 16 (N -> nr .)
    ;               reduce using rule 16 (N -> nr .)
    )               reduce using rule 16 (N -> nr .)
    entao           reduce using rule 16 (N -> nr .)
    ,               reduce using rule 16 (N -> nr .)
    ate             reduce using rule 16 (N -> nr .)
    senao           reduce using rule 16 (N -> nr .)
    {               reduce using rule 16 (N -> nr .)
    fim_se          reduce using rule 16 (N -> nr .)
    }               reduce using rule 16 (N -> nr .)


state 19

    (23) N -> cos . ( E )

    (               shift and go to state 42


state 20

    (24) N -> sen . ( E )

    (               shift and go to state 43


state 21

    (28) F -> verdadeiro .

    e               reduce using rule 28 (F -> verdadeiro .)
    ou              reduce using rule 28 (F -> verdadeiro .)
    +               reduce using rule 28 (F -> verdadeiro .)
    -               reduce using rule 28 (F -> verdadeiro .)
    *               reduce using rule 28 (F -> verdadeiro .)
    /               reduce using rule 28 (F -> verdadeiro .)
    <               reduce using rule 28 (F -> verdadeiro .)
    >               reduce using rule 28 (F -> verdadeiro .)
    Fim             reduce using rule 28 (F -> verdadeiro .)
    ;               reduce using rule 28 (F -> verdadeiro .)
    )               reduce using rule 28 (F -> verdadeiro .)
    entao           reduce using rule 28 (F -> verdadeiro .)
    ,               reduce using rule 28 (F -> verdadeiro .)
    ate             reduce using rule 28 (F -> verdadeiro .)
    senao           reduce using rule 28 (F -> verdadeiro .)
    {               reduce using rule 28 (F -> verdadeiro .)
    fim_se          reduce using rule 28 (F -> verdadeiro .)
    }               reduce using rule 28 (F -> verdadeiro .)


state 22

    (29) F -> falso .

    e               reduce using rule 29 (F -> falso .)
    ou              reduce using rule 29 (F -> falso .)
    +               reduce using rule 29 (F -> falso .)
    -               reduce using rule 29 (F -> falso .)
    *               reduce using rule 29 (F -> falso .)
    /               reduce using rule 29 (F -> falso .)
    <               reduce using rule 29 (F -> falso .)
    >               reduce using rule 29 (F -> falso .)
    Fim             reduce using rule 29 (F -> falso .)
    ;               reduce using rule 29 (F -> falso .)
    )               reduce using rule 29 (F -> falso .)
    entao           reduce using rule 29 (F -> falso .)
    ,               reduce using rule 29 (F -> falso .)
    ate             reduce using rule 29 (F -> falso .)
    senao           reduce using rule 29 (F -> falso .)
    {               reduce using rule 29 (F -> falso .)
    fim_se          reduce using rule 29 (F -> falso .)
    }               reduce using rule 29 (F -> falso .)


state 23

    (30) F -> nao . F
    (31) F -> nao . var
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 45
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    F                              shift and go to state 44

state 24

    (1) axioma -> Inicio code Fim .

    $end            reduce using rule 1 (axioma -> Inicio code Fim .)


state 25

    (3) code -> code ; . S
    (4) S -> . C
    (6) C -> . E
    (7) C -> . condicao
    (8) C -> . escreva ( e_list ) ;
    (9) C -> . leia ( var ) ;
    (10) C -> . var atribui E ;
    (11) C -> . para var de E ate E { c_list }
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (5) condicao -> . se E entao c_list senao c_list fim_se
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    escreva         shift and go to state 8
    leia            shift and go to state 10
    var             shift and go to state 11
    para            shift and go to state 12
    (               shift and go to state 9
    string          shift and go to state 15
    se              shift and go to state 16
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    S                              shift and go to state 46
    C                              shift and go to state 5
    E                              shift and go to state 6
    condicao                       shift and go to state 7
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 26

    (26) B -> E e . E
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 47
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 27

    (27) B -> E ou . E
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 48
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 28

    (17) N -> E + . E
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 49
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 29

    (18) N -> E - . E
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 50
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 30

    (19) N -> E * . E
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 51
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 31

    (20) N -> E / . E
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 52
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 32

    (21) N -> E < . E
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 53
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 33

    (22) N -> E > . E
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 54
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 34

    (8) C -> escreva ( . e_list ) ;
    (12) e_list -> . E
    (13) e_list -> . e_list , E
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    e_list                         shift and go to state 55
    E                              shift and go to state 56
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 35

    (33) E -> ( E . )
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    )               shift and go to state 57
    e               shift and go to state 26
    ou              shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    <               shift and go to state 32
    >               shift and go to state 33


state 36

    (32) E -> var .
    (37) E -> var . ( e_list )
    (38) E -> var . ( )

    )               reduce using rule 32 (E -> var .)
    e               reduce using rule 32 (E -> var .)
    ou              reduce using rule 32 (E -> var .)
    +               reduce using rule 32 (E -> var .)
    -               reduce using rule 32 (E -> var .)
    *               reduce using rule 32 (E -> var .)
    /               reduce using rule 32 (E -> var .)
    <               reduce using rule 32 (E -> var .)
    >               reduce using rule 32 (E -> var .)
    entao           reduce using rule 32 (E -> var .)
    Fim             reduce using rule 32 (E -> var .)
    ;               reduce using rule 32 (E -> var .)
    ,               reduce using rule 32 (E -> var .)
    ate             reduce using rule 32 (E -> var .)
    senao           reduce using rule 32 (E -> var .)
    {               reduce using rule 32 (E -> var .)
    fim_se          reduce using rule 32 (E -> var .)
    }               reduce using rule 32 (E -> var .)
    (               shift and go to state 39


state 37

    (9) C -> leia ( . var ) ;

    var             shift and go to state 58


state 38

    (10) C -> var atribui . E ;
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 59
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 39

    (37) E -> var ( . e_list )
    (38) E -> var ( . )
    (12) e_list -> . E
    (13) e_list -> . e_list , E
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    )               shift and go to state 61
    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    e_list                         shift and go to state 60
    E                              shift and go to state 56
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 40

    (11) C -> para var . de E ate E { c_list }

    de              shift and go to state 62


state 41

    (5) condicao -> se E . entao c_list senao c_list fim_se
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    entao           shift and go to state 63
    e               shift and go to state 26
    ou              shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    <               shift and go to state 32
    >               shift and go to state 33


state 42

    (23) N -> cos ( . E )
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 64
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 43

    (24) N -> sen ( . E )
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 65
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 44

    (30) F -> nao F .

    e               reduce using rule 30 (F -> nao F .)
    ou              reduce using rule 30 (F -> nao F .)
    +               reduce using rule 30 (F -> nao F .)
    -               reduce using rule 30 (F -> nao F .)
    *               reduce using rule 30 (F -> nao F .)
    /               reduce using rule 30 (F -> nao F .)
    <               reduce using rule 30 (F -> nao F .)
    >               reduce using rule 30 (F -> nao F .)
    Fim             reduce using rule 30 (F -> nao F .)
    ;               reduce using rule 30 (F -> nao F .)
    )               reduce using rule 30 (F -> nao F .)
    entao           reduce using rule 30 (F -> nao F .)
    ,               reduce using rule 30 (F -> nao F .)
    ate             reduce using rule 30 (F -> nao F .)
    senao           reduce using rule 30 (F -> nao F .)
    {               reduce using rule 30 (F -> nao F .)
    fim_se          reduce using rule 30 (F -> nao F .)
    }               reduce using rule 30 (F -> nao F .)


state 45

    (31) F -> nao var .

    e               reduce using rule 31 (F -> nao var .)
    ou              reduce using rule 31 (F -> nao var .)
    +               reduce using rule 31 (F -> nao var .)
    -               reduce using rule 31 (F -> nao var .)
    *               reduce using rule 31 (F -> nao var .)
    /               reduce using rule 31 (F -> nao var .)
    <               reduce using rule 31 (F -> nao var .)
    >               reduce using rule 31 (F -> nao var .)
    Fim             reduce using rule 31 (F -> nao var .)
    ;               reduce using rule 31 (F -> nao var .)
    )               reduce using rule 31 (F -> nao var .)
    entao           reduce using rule 31 (F -> nao var .)
    ,               reduce using rule 31 (F -> nao var .)
    ate             reduce using rule 31 (F -> nao var .)
    senao           reduce using rule 31 (F -> nao var .)
    {               reduce using rule 31 (F -> nao var .)
    fim_se          reduce using rule 31 (F -> nao var .)
    }               reduce using rule 31 (F -> nao var .)


state 46

    (3) code -> code ; S .

    Fim             reduce using rule 3 (code -> code ; S .)
    ;               reduce using rule 3 (code -> code ; S .)


state 47

    (26) B -> E e E .
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    e               reduce using rule 26 (B -> E e E .)
    ou              reduce using rule 26 (B -> E e E .)
    Fim             reduce using rule 26 (B -> E e E .)
    ;               reduce using rule 26 (B -> E e E .)
    )               reduce using rule 26 (B -> E e E .)
    entao           reduce using rule 26 (B -> E e E .)
    ,               reduce using rule 26 (B -> E e E .)
    ate             reduce using rule 26 (B -> E e E .)
    senao           reduce using rule 26 (B -> E e E .)
    {               reduce using rule 26 (B -> E e E .)
    fim_se          reduce using rule 26 (B -> E e E .)
    }               reduce using rule 26 (B -> E e E .)
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    <               shift and go to state 32
    >               shift and go to state 33

  ! +               [ reduce using rule 26 (B -> E e E .) ]
  ! -               [ reduce using rule 26 (B -> E e E .) ]
  ! *               [ reduce using rule 26 (B -> E e E .) ]
  ! /               [ reduce using rule 26 (B -> E e E .) ]
  ! <               [ reduce using rule 26 (B -> E e E .) ]
  ! >               [ reduce using rule 26 (B -> E e E .) ]
  ! e               [ shift and go to state 26 ]
  ! ou              [ shift and go to state 27 ]


state 48

    (27) B -> E ou E .
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    ou              reduce using rule 27 (B -> E ou E .)
    Fim             reduce using rule 27 (B -> E ou E .)
    ;               reduce using rule 27 (B -> E ou E .)
    )               reduce using rule 27 (B -> E ou E .)
    entao           reduce using rule 27 (B -> E ou E .)
    ,               reduce using rule 27 (B -> E ou E .)
    ate             reduce using rule 27 (B -> E ou E .)
    senao           reduce using rule 27 (B -> E ou E .)
    {               reduce using rule 27 (B -> E ou E .)
    fim_se          reduce using rule 27 (B -> E ou E .)
    }               reduce using rule 27 (B -> E ou E .)
    e               shift and go to state 26
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    <               shift and go to state 32
    >               shift and go to state 33

  ! e               [ reduce using rule 27 (B -> E ou E .) ]
  ! +               [ reduce using rule 27 (B -> E ou E .) ]
  ! -               [ reduce using rule 27 (B -> E ou E .) ]
  ! *               [ reduce using rule 27 (B -> E ou E .) ]
  ! /               [ reduce using rule 27 (B -> E ou E .) ]
  ! <               [ reduce using rule 27 (B -> E ou E .) ]
  ! >               [ reduce using rule 27 (B -> E ou E .) ]
  ! ou              [ shift and go to state 27 ]


state 49

    (17) N -> E + E .
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    e               reduce using rule 17 (N -> E + E .)
    ou              reduce using rule 17 (N -> E + E .)
    +               reduce using rule 17 (N -> E + E .)
    -               reduce using rule 17 (N -> E + E .)
    <               reduce using rule 17 (N -> E + E .)
    >               reduce using rule 17 (N -> E + E .)
    Fim             reduce using rule 17 (N -> E + E .)
    ;               reduce using rule 17 (N -> E + E .)
    )               reduce using rule 17 (N -> E + E .)
    entao           reduce using rule 17 (N -> E + E .)
    ,               reduce using rule 17 (N -> E + E .)
    ate             reduce using rule 17 (N -> E + E .)
    senao           reduce using rule 17 (N -> E + E .)
    {               reduce using rule 17 (N -> E + E .)
    fim_se          reduce using rule 17 (N -> E + E .)
    }               reduce using rule 17 (N -> E + E .)
    *               shift and go to state 30
    /               shift and go to state 31

  ! *               [ reduce using rule 17 (N -> E + E .) ]
  ! /               [ reduce using rule 17 (N -> E + E .) ]
  ! e               [ shift and go to state 26 ]
  ! ou              [ shift and go to state 27 ]
  ! +               [ shift and go to state 28 ]
  ! -               [ shift and go to state 29 ]
  ! <               [ shift and go to state 32 ]
  ! >               [ shift and go to state 33 ]


state 50

    (18) N -> E - E .
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    e               reduce using rule 18 (N -> E - E .)
    ou              reduce using rule 18 (N -> E - E .)
    +               reduce using rule 18 (N -> E - E .)
    -               reduce using rule 18 (N -> E - E .)
    <               reduce using rule 18 (N -> E - E .)
    >               reduce using rule 18 (N -> E - E .)
    Fim             reduce using rule 18 (N -> E - E .)
    ;               reduce using rule 18 (N -> E - E .)
    )               reduce using rule 18 (N -> E - E .)
    entao           reduce using rule 18 (N -> E - E .)
    ,               reduce using rule 18 (N -> E - E .)
    ate             reduce using rule 18 (N -> E - E .)
    senao           reduce using rule 18 (N -> E - E .)
    {               reduce using rule 18 (N -> E - E .)
    fim_se          reduce using rule 18 (N -> E - E .)
    }               reduce using rule 18 (N -> E - E .)
    *               shift and go to state 30
    /               shift and go to state 31

  ! *               [ reduce using rule 18 (N -> E - E .) ]
  ! /               [ reduce using rule 18 (N -> E - E .) ]
  ! e               [ shift and go to state 26 ]
  ! ou              [ shift and go to state 27 ]
  ! +               [ shift and go to state 28 ]
  ! -               [ shift and go to state 29 ]
  ! <               [ shift and go to state 32 ]
  ! >               [ shift and go to state 33 ]


state 51

    (19) N -> E * E .
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    e               reduce using rule 19 (N -> E * E .)
    ou              reduce using rule 19 (N -> E * E .)
    +               reduce using rule 19 (N -> E * E .)
    -               reduce using rule 19 (N -> E * E .)
    *               reduce using rule 19 (N -> E * E .)
    /               reduce using rule 19 (N -> E * E .)
    <               reduce using rule 19 (N -> E * E .)
    >               reduce using rule 19 (N -> E * E .)
    Fim             reduce using rule 19 (N -> E * E .)
    ;               reduce using rule 19 (N -> E * E .)
    )               reduce using rule 19 (N -> E * E .)
    entao           reduce using rule 19 (N -> E * E .)
    ,               reduce using rule 19 (N -> E * E .)
    ate             reduce using rule 19 (N -> E * E .)
    senao           reduce using rule 19 (N -> E * E .)
    {               reduce using rule 19 (N -> E * E .)
    fim_se          reduce using rule 19 (N -> E * E .)
    }               reduce using rule 19 (N -> E * E .)

  ! e               [ shift and go to state 26 ]
  ! ou              [ shift and go to state 27 ]
  ! +               [ shift and go to state 28 ]
  ! -               [ shift and go to state 29 ]
  ! *               [ shift and go to state 30 ]
  ! /               [ shift and go to state 31 ]
  ! <               [ shift and go to state 32 ]
  ! >               [ shift and go to state 33 ]


state 52

    (20) N -> E / E .
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    e               reduce using rule 20 (N -> E / E .)
    ou              reduce using rule 20 (N -> E / E .)
    +               reduce using rule 20 (N -> E / E .)
    -               reduce using rule 20 (N -> E / E .)
    *               reduce using rule 20 (N -> E / E .)
    /               reduce using rule 20 (N -> E / E .)
    <               reduce using rule 20 (N -> E / E .)
    >               reduce using rule 20 (N -> E / E .)
    Fim             reduce using rule 20 (N -> E / E .)
    ;               reduce using rule 20 (N -> E / E .)
    )               reduce using rule 20 (N -> E / E .)
    entao           reduce using rule 20 (N -> E / E .)
    ,               reduce using rule 20 (N -> E / E .)
    ate             reduce using rule 20 (N -> E / E .)
    senao           reduce using rule 20 (N -> E / E .)
    {               reduce using rule 20 (N -> E / E .)
    fim_se          reduce using rule 20 (N -> E / E .)
    }               reduce using rule 20 (N -> E / E .)

  ! e               [ shift and go to state 26 ]
  ! ou              [ shift and go to state 27 ]
  ! +               [ shift and go to state 28 ]
  ! -               [ shift and go to state 29 ]
  ! *               [ shift and go to state 30 ]
  ! /               [ shift and go to state 31 ]
  ! <               [ shift and go to state 32 ]
  ! >               [ shift and go to state 33 ]


state 53

    (21) N -> E < E .
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    e               reduce using rule 21 (N -> E < E .)
    ou              reduce using rule 21 (N -> E < E .)
    <               reduce using rule 21 (N -> E < E .)
    >               reduce using rule 21 (N -> E < E .)
    Fim             reduce using rule 21 (N -> E < E .)
    ;               reduce using rule 21 (N -> E < E .)
    )               reduce using rule 21 (N -> E < E .)
    entao           reduce using rule 21 (N -> E < E .)
    ,               reduce using rule 21 (N -> E < E .)
    ate             reduce using rule 21 (N -> E < E .)
    senao           reduce using rule 21 (N -> E < E .)
    {               reduce using rule 21 (N -> E < E .)
    fim_se          reduce using rule 21 (N -> E < E .)
    }               reduce using rule 21 (N -> E < E .)
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31

  ! +               [ reduce using rule 21 (N -> E < E .) ]
  ! -               [ reduce using rule 21 (N -> E < E .) ]
  ! *               [ reduce using rule 21 (N -> E < E .) ]
  ! /               [ reduce using rule 21 (N -> E < E .) ]
  ! e               [ shift and go to state 26 ]
  ! ou              [ shift and go to state 27 ]
  ! <               [ shift and go to state 32 ]
  ! >               [ shift and go to state 33 ]


state 54

    (22) N -> E > E .
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    e               reduce using rule 22 (N -> E > E .)
    ou              reduce using rule 22 (N -> E > E .)
    <               reduce using rule 22 (N -> E > E .)
    >               reduce using rule 22 (N -> E > E .)
    Fim             reduce using rule 22 (N -> E > E .)
    ;               reduce using rule 22 (N -> E > E .)
    )               reduce using rule 22 (N -> E > E .)
    entao           reduce using rule 22 (N -> E > E .)
    ,               reduce using rule 22 (N -> E > E .)
    ate             reduce using rule 22 (N -> E > E .)
    senao           reduce using rule 22 (N -> E > E .)
    {               reduce using rule 22 (N -> E > E .)
    fim_se          reduce using rule 22 (N -> E > E .)
    }               reduce using rule 22 (N -> E > E .)
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31

  ! +               [ reduce using rule 22 (N -> E > E .) ]
  ! -               [ reduce using rule 22 (N -> E > E .) ]
  ! *               [ reduce using rule 22 (N -> E > E .) ]
  ! /               [ reduce using rule 22 (N -> E > E .) ]
  ! e               [ shift and go to state 26 ]
  ! ou              [ shift and go to state 27 ]
  ! <               [ shift and go to state 32 ]
  ! >               [ shift and go to state 33 ]


state 55

    (8) C -> escreva ( e_list . ) ;
    (13) e_list -> e_list . , E

    )               shift and go to state 66
    ,               shift and go to state 67


state 56

    (12) e_list -> E .
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    )               reduce using rule 12 (e_list -> E .)
    ,               reduce using rule 12 (e_list -> E .)
    e               shift and go to state 26
    ou              shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    <               shift and go to state 32
    >               shift and go to state 33


state 57

    (33) E -> ( E ) .

    e               reduce using rule 33 (E -> ( E ) .)
    ou              reduce using rule 33 (E -> ( E ) .)
    +               reduce using rule 33 (E -> ( E ) .)
    -               reduce using rule 33 (E -> ( E ) .)
    *               reduce using rule 33 (E -> ( E ) .)
    /               reduce using rule 33 (E -> ( E ) .)
    <               reduce using rule 33 (E -> ( E ) .)
    >               reduce using rule 33 (E -> ( E ) .)
    Fim             reduce using rule 33 (E -> ( E ) .)
    ;               reduce using rule 33 (E -> ( E ) .)
    )               reduce using rule 33 (E -> ( E ) .)
    entao           reduce using rule 33 (E -> ( E ) .)
    ,               reduce using rule 33 (E -> ( E ) .)
    ate             reduce using rule 33 (E -> ( E ) .)
    senao           reduce using rule 33 (E -> ( E ) .)
    {               reduce using rule 33 (E -> ( E ) .)
    fim_se          reduce using rule 33 (E -> ( E ) .)
    }               reduce using rule 33 (E -> ( E ) .)


state 58

    (9) C -> leia ( var . ) ;

    )               shift and go to state 68


state 59

    (10) C -> var atribui E . ;
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    ;               shift and go to state 69
    e               shift and go to state 26
    ou              shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    <               shift and go to state 32
    >               shift and go to state 33


state 60

    (37) E -> var ( e_list . )
    (13) e_list -> e_list . , E

    )               shift and go to state 70
    ,               shift and go to state 67


state 61

    (38) E -> var ( ) .

    e               reduce using rule 38 (E -> var ( ) .)
    ou              reduce using rule 38 (E -> var ( ) .)
    +               reduce using rule 38 (E -> var ( ) .)
    -               reduce using rule 38 (E -> var ( ) .)
    *               reduce using rule 38 (E -> var ( ) .)
    /               reduce using rule 38 (E -> var ( ) .)
    <               reduce using rule 38 (E -> var ( ) .)
    >               reduce using rule 38 (E -> var ( ) .)
    Fim             reduce using rule 38 (E -> var ( ) .)
    ;               reduce using rule 38 (E -> var ( ) .)
    )               reduce using rule 38 (E -> var ( ) .)
    entao           reduce using rule 38 (E -> var ( ) .)
    ,               reduce using rule 38 (E -> var ( ) .)
    ate             reduce using rule 38 (E -> var ( ) .)
    senao           reduce using rule 38 (E -> var ( ) .)
    {               reduce using rule 38 (E -> var ( ) .)
    fim_se          reduce using rule 38 (E -> var ( ) .)
    }               reduce using rule 38 (E -> var ( ) .)


state 62

    (11) C -> para var de . E ate E { c_list }
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 71
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 63

    (5) condicao -> se E entao . c_list senao c_list fim_se
    (14) c_list -> . C
    (15) c_list -> . c_list ; C
    (6) C -> . E
    (7) C -> . condicao
    (8) C -> . escreva ( e_list ) ;
    (9) C -> . leia ( var ) ;
    (10) C -> . var atribui E ;
    (11) C -> . para var de E ate E { c_list }
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (5) condicao -> . se E entao c_list senao c_list fim_se
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    escreva         shift and go to state 8
    leia            shift and go to state 10
    var             shift and go to state 11
    para            shift and go to state 12
    (               shift and go to state 9
    string          shift and go to state 15
    se              shift and go to state 16
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 6
    c_list                         shift and go to state 72
    C                              shift and go to state 73
    condicao                       shift and go to state 7
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 64

    (23) N -> cos ( E . )
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    )               shift and go to state 74
    e               shift and go to state 26
    ou              shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    <               shift and go to state 32
    >               shift and go to state 33


state 65

    (24) N -> sen ( E . )
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    )               shift and go to state 75
    e               shift and go to state 26
    ou              shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    <               shift and go to state 32
    >               shift and go to state 33


state 66

    (8) C -> escreva ( e_list ) . ;

    ;               shift and go to state 76


state 67

    (13) e_list -> e_list , . E
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 77
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 68

    (9) C -> leia ( var ) . ;

    ;               shift and go to state 78


state 69

    (10) C -> var atribui E ; .

    Fim             reduce using rule 10 (C -> var atribui E ; .)
    ;               reduce using rule 10 (C -> var atribui E ; .)
    senao           reduce using rule 10 (C -> var atribui E ; .)
    fim_se          reduce using rule 10 (C -> var atribui E ; .)
    }               reduce using rule 10 (C -> var atribui E ; .)


state 70

    (37) E -> var ( e_list ) .

    e               reduce using rule 37 (E -> var ( e_list ) .)
    ou              reduce using rule 37 (E -> var ( e_list ) .)
    +               reduce using rule 37 (E -> var ( e_list ) .)
    -               reduce using rule 37 (E -> var ( e_list ) .)
    *               reduce using rule 37 (E -> var ( e_list ) .)
    /               reduce using rule 37 (E -> var ( e_list ) .)
    <               reduce using rule 37 (E -> var ( e_list ) .)
    >               reduce using rule 37 (E -> var ( e_list ) .)
    Fim             reduce using rule 37 (E -> var ( e_list ) .)
    ;               reduce using rule 37 (E -> var ( e_list ) .)
    )               reduce using rule 37 (E -> var ( e_list ) .)
    entao           reduce using rule 37 (E -> var ( e_list ) .)
    ,               reduce using rule 37 (E -> var ( e_list ) .)
    ate             reduce using rule 37 (E -> var ( e_list ) .)
    senao           reduce using rule 37 (E -> var ( e_list ) .)
    {               reduce using rule 37 (E -> var ( e_list ) .)
    fim_se          reduce using rule 37 (E -> var ( e_list ) .)
    }               reduce using rule 37 (E -> var ( e_list ) .)


state 71

    (11) C -> para var de E . ate E { c_list }
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    ate             shift and go to state 79
    e               shift and go to state 26
    ou              shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    <               shift and go to state 32
    >               shift and go to state 33


state 72

    (5) condicao -> se E entao c_list . senao c_list fim_se
    (15) c_list -> c_list . ; C

    senao           shift and go to state 80
    ;               shift and go to state 81


state 73

    (14) c_list -> C .

    senao           reduce using rule 14 (c_list -> C .)
    ;               reduce using rule 14 (c_list -> C .)
    fim_se          reduce using rule 14 (c_list -> C .)
    }               reduce using rule 14 (c_list -> C .)


state 74

    (23) N -> cos ( E ) .

    e               reduce using rule 23 (N -> cos ( E ) .)
    ou              reduce using rule 23 (N -> cos ( E ) .)
    +               reduce using rule 23 (N -> cos ( E ) .)
    -               reduce using rule 23 (N -> cos ( E ) .)
    *               reduce using rule 23 (N -> cos ( E ) .)
    /               reduce using rule 23 (N -> cos ( E ) .)
    <               reduce using rule 23 (N -> cos ( E ) .)
    >               reduce using rule 23 (N -> cos ( E ) .)
    Fim             reduce using rule 23 (N -> cos ( E ) .)
    ;               reduce using rule 23 (N -> cos ( E ) .)
    )               reduce using rule 23 (N -> cos ( E ) .)
    entao           reduce using rule 23 (N -> cos ( E ) .)
    ,               reduce using rule 23 (N -> cos ( E ) .)
    ate             reduce using rule 23 (N -> cos ( E ) .)
    senao           reduce using rule 23 (N -> cos ( E ) .)
    {               reduce using rule 23 (N -> cos ( E ) .)
    fim_se          reduce using rule 23 (N -> cos ( E ) .)
    }               reduce using rule 23 (N -> cos ( E ) .)


state 75

    (24) N -> sen ( E ) .

    e               reduce using rule 24 (N -> sen ( E ) .)
    ou              reduce using rule 24 (N -> sen ( E ) .)
    +               reduce using rule 24 (N -> sen ( E ) .)
    -               reduce using rule 24 (N -> sen ( E ) .)
    *               reduce using rule 24 (N -> sen ( E ) .)
    /               reduce using rule 24 (N -> sen ( E ) .)
    <               reduce using rule 24 (N -> sen ( E ) .)
    >               reduce using rule 24 (N -> sen ( E ) .)
    Fim             reduce using rule 24 (N -> sen ( E ) .)
    ;               reduce using rule 24 (N -> sen ( E ) .)
    )               reduce using rule 24 (N -> sen ( E ) .)
    entao           reduce using rule 24 (N -> sen ( E ) .)
    ,               reduce using rule 24 (N -> sen ( E ) .)
    ate             reduce using rule 24 (N -> sen ( E ) .)
    senao           reduce using rule 24 (N -> sen ( E ) .)
    {               reduce using rule 24 (N -> sen ( E ) .)
    fim_se          reduce using rule 24 (N -> sen ( E ) .)
    }               reduce using rule 24 (N -> sen ( E ) .)


state 76

    (8) C -> escreva ( e_list ) ; .

    Fim             reduce using rule 8 (C -> escreva ( e_list ) ; .)
    ;               reduce using rule 8 (C -> escreva ( e_list ) ; .)
    senao           reduce using rule 8 (C -> escreva ( e_list ) ; .)
    fim_se          reduce using rule 8 (C -> escreva ( e_list ) ; .)
    }               reduce using rule 8 (C -> escreva ( e_list ) ; .)


state 77

    (13) e_list -> e_list , E .
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    )               reduce using rule 13 (e_list -> e_list , E .)
    ,               reduce using rule 13 (e_list -> e_list , E .)
    e               shift and go to state 26
    ou              shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    <               shift and go to state 32
    >               shift and go to state 33


state 78

    (9) C -> leia ( var ) ; .

    Fim             reduce using rule 9 (C -> leia ( var ) ; .)
    ;               reduce using rule 9 (C -> leia ( var ) ; .)
    senao           reduce using rule 9 (C -> leia ( var ) ; .)
    fim_se          reduce using rule 9 (C -> leia ( var ) ; .)
    }               reduce using rule 9 (C -> leia ( var ) ; .)


state 79

    (11) C -> para var de E ate . E { c_list }
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    var             shift and go to state 36
    (               shift and go to state 9
    string          shift and go to state 15
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 82
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 80

    (5) condicao -> se E entao c_list senao . c_list fim_se
    (14) c_list -> . C
    (15) c_list -> . c_list ; C
    (6) C -> . E
    (7) C -> . condicao
    (8) C -> . escreva ( e_list ) ;
    (9) C -> . leia ( var ) ;
    (10) C -> . var atribui E ;
    (11) C -> . para var de E ate E { c_list }
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (5) condicao -> . se E entao c_list senao c_list fim_se
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    escreva         shift and go to state 8
    leia            shift and go to state 10
    var             shift and go to state 11
    para            shift and go to state 12
    (               shift and go to state 9
    string          shift and go to state 15
    se              shift and go to state 16
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 6
    c_list                         shift and go to state 83
    C                              shift and go to state 73
    condicao                       shift and go to state 7
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 81

    (15) c_list -> c_list ; . C
    (6) C -> . E
    (7) C -> . condicao
    (8) C -> . escreva ( e_list ) ;
    (9) C -> . leia ( var ) ;
    (10) C -> . var atribui E ;
    (11) C -> . para var de E ate E { c_list }
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (5) condicao -> . se E entao c_list senao c_list fim_se
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    escreva         shift and go to state 8
    leia            shift and go to state 10
    var             shift and go to state 11
    para            shift and go to state 12
    (               shift and go to state 9
    string          shift and go to state 15
    se              shift and go to state 16
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    C                              shift and go to state 84
    E                              shift and go to state 6
    condicao                       shift and go to state 7
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 82

    (11) C -> para var de E ate E . { c_list }
    (26) B -> E . e E
    (27) B -> E . ou E
    (17) N -> E . + E
    (18) N -> E . - E
    (19) N -> E . * E
    (20) N -> E . / E
    (21) N -> E . < E
    (22) N -> E . > E

    {               shift and go to state 85
    e               shift and go to state 26
    ou              shift and go to state 27
    +               shift and go to state 28
    -               shift and go to state 29
    *               shift and go to state 30
    /               shift and go to state 31
    <               shift and go to state 32
    >               shift and go to state 33


state 83

    (5) condicao -> se E entao c_list senao c_list . fim_se
    (15) c_list -> c_list . ; C

    fim_se          shift and go to state 86
    ;               shift and go to state 81


state 84

    (15) c_list -> c_list ; C .

    senao           reduce using rule 15 (c_list -> c_list ; C .)
    ;               reduce using rule 15 (c_list -> c_list ; C .)
    fim_se          reduce using rule 15 (c_list -> c_list ; C .)
    }               reduce using rule 15 (c_list -> c_list ; C .)


state 85

    (11) C -> para var de E ate E { . c_list }
    (14) c_list -> . C
    (15) c_list -> . c_list ; C
    (6) C -> . E
    (7) C -> . condicao
    (8) C -> . escreva ( e_list ) ;
    (9) C -> . leia ( var ) ;
    (10) C -> . var atribui E ;
    (11) C -> . para var de E ate E { c_list }
    (32) E -> . var
    (33) E -> . ( E )
    (34) E -> . B
    (35) E -> . N
    (36) E -> . string
    (37) E -> . var ( e_list )
    (38) E -> . var ( )
    (5) condicao -> . se E entao c_list senao c_list fim_se
    (25) B -> . F
    (26) B -> . E e E
    (27) B -> . E ou E
    (16) N -> . nr
    (17) N -> . E + E
    (18) N -> . E - E
    (19) N -> . E * E
    (20) N -> . E / E
    (21) N -> . E < E
    (22) N -> . E > E
    (23) N -> . cos ( E )
    (24) N -> . sen ( E )
    (28) F -> . verdadeiro
    (29) F -> . falso
    (30) F -> . nao F
    (31) F -> . nao var

    escreva         shift and go to state 8
    leia            shift and go to state 10
    var             shift and go to state 11
    para            shift and go to state 12
    (               shift and go to state 9
    string          shift and go to state 15
    se              shift and go to state 16
    nr              shift and go to state 18
    cos             shift and go to state 19
    sen             shift and go to state 20
    verdadeiro      shift and go to state 21
    falso           shift and go to state 22
    nao             shift and go to state 23

    E                              shift and go to state 6
    c_list                         shift and go to state 87
    C                              shift and go to state 73
    condicao                       shift and go to state 7
    B                              shift and go to state 13
    N                              shift and go to state 14
    F                              shift and go to state 17

state 86

    (5) condicao -> se E entao c_list senao c_list fim_se .

    Fim             reduce using rule 5 (condicao -> se E entao c_list senao c_list fim_se .)
    ;               reduce using rule 5 (condicao -> se E entao c_list senao c_list fim_se .)
    senao           reduce using rule 5 (condicao -> se E entao c_list senao c_list fim_se .)
    fim_se          reduce using rule 5 (condicao -> se E entao c_list senao c_list fim_se .)
    }               reduce using rule 5 (condicao -> se E entao c_list senao c_list fim_se .)


state 87

    (11) C -> para var de E ate E { c_list . }
    (15) c_list -> c_list . ; C

    }               shift and go to state 88
    ;               shift and go to state 81


state 88

    (11) C -> para var de E ate E { c_list } .

    Fim             reduce using rule 11 (C -> para var de E ate E { c_list } .)
    ;               reduce using rule 11 (C -> para var de E ate E { c_list } .)
    senao           reduce using rule 11 (C -> para var de E ate E { c_list } .)
    fim_se          reduce using rule 11 (C -> para var de E ate E { c_list } .)
    }               reduce using rule 11 (C -> para var de E ate E { c_list } .)

