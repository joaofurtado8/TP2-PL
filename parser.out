Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    caracter
    ellipsis
    inteiro
    logico
    real

Grammar

Rule 0     S' -> axioma
Rule 1     axioma -> Inicio code Fim
Rule 2     code -> S
Rule 3     code -> code ; S
Rule 4     S -> C
Rule 5     S -> E
Rule 6     S -> A
Rule 7     S -> condicao
Rule 8     condicao -> se E entao c_list senao c_list fim_se
Rule 9     C -> escreva ( e_list ) ;
Rule 10    C -> leia ( var ) ;
Rule 11    C -> para var de E ate E { c_list } fim_para
Rule 12    A -> fun var ( args ) { code }
Rule 13    A -> var atribui E ;
Rule 14    e_list -> E
Rule 15    e_list -> e_list , E
Rule 16    c_list -> C
Rule 17    c_list -> c_list ; C
Rule 18    N -> nr
Rule 19    N -> E + E
Rule 20    N -> E - E
Rule 21    N -> E * E
Rule 22    N -> E / E
Rule 23    N -> E < E
Rule 24    N -> E > E
Rule 25    N -> cos ( E )
Rule 26    N -> sen ( E )
Rule 27    B -> F
Rule 28    B -> E e E
Rule 29    B -> E ou E
Rule 30    F -> verdadeiro
Rule 31    F -> falso
Rule 32    F -> nao F
Rule 33    F -> nao var
Rule 34    E -> var
Rule 35    E -> ( E )
Rule 36    E -> B
Rule 37    E -> N
Rule 38    E -> string
Rule 39    E -> var ( arg_list )
Rule 40    E -> var ( )
Rule 41    E -> var ( var_list )
Rule 42    args -> <empty>
Rule 43    args -> var_list
Rule 44    var_list -> var
Rule 45    var_list -> var_list , var
Rule 46    arg_list -> E
Rule 47    arg_list -> arg_list , E

Terminals, with rules where they appear

(                    : 9 10 12 25 26 35 39 40 41
)                    : 9 10 12 25 26 35 39 40 41
*                    : 21
+                    : 19
,                    : 15 45 47
-                    : 20
/                    : 22
;                    : 3 9 10 13 17
<                    : 23
>                    : 24
Fim                  : 1
Inicio               : 1
ate                  : 11
atribui              : 13
caracter             : 
cos                  : 25
de                   : 11
e                    : 28
ellipsis             : 
entao                : 8
error                : 
escreva              : 9
falso                : 31
fim_para             : 11
fim_se               : 8
fun                  : 12
inteiro              : 
leia                 : 10
logico               : 
nao                  : 32 33
nr                   : 18
ou                   : 29
para                 : 11
real                 : 
se                   : 8
sen                  : 26
senao                : 8
string               : 38
var                  : 10 11 12 13 33 34 39 40 41 44 45
verdadeiro           : 30
{                    : 11 12
}                    : 11 12

Nonterminals, with rules where they appear

A                    : 6
B                    : 36
C                    : 4 16 17
E                    : 5 8 11 11 13 14 15 19 19 20 20 21 21 22 22 23 23 24 24 25 26 28 28 29 29 35 46 47
F                    : 27 32
N                    : 37
S                    : 2 3
arg_list             : 39 47
args                 : 12
axioma               : 0
c_list               : 8 8 11 17
code                 : 1 3 12
condicao             : 7
e_list               : 9 15
var_list             : 41 43 45

Parsing method: LALR

state 0

    (0) S' -> . axioma
    (1) axioma -> . Inicio code Fim

    Inicio          shift and go to state 2

    axioma                         shift and go to state 1

state 1

    (0) S' -> axioma .



state 2

    (1) axioma -> Inicio . code Fim
    (2) code -> . S
    (3) code -> . code ; S
    (4) S -> . C
    (5) S -> . E
    (6) S -> . A
    (7) S -> . condicao
    (9) C -> . escreva ( e_list ) ;
    (10) C -> . leia ( var ) ;
    (11) C -> . para var de E ate E { c_list } fim_para
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (12) A -> . fun var ( args ) { code }
    (13) A -> . var atribui E ;
    (8) condicao -> . se E entao c_list senao c_list fim_se
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    escreva         shift and go to state 9
    leia            shift and go to state 11
    para            shift and go to state 13
    var             shift and go to state 12
    (               shift and go to state 10
    string          shift and go to state 16
    fun             shift and go to state 17
    se              shift and go to state 18
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    code                           shift and go to state 3
    S                              shift and go to state 4
    C                              shift and go to state 5
    E                              shift and go to state 6
    A                              shift and go to state 7
    condicao                       shift and go to state 8
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 3

    (1) axioma -> Inicio code . Fim
    (3) code -> code . ; S

    Fim             shift and go to state 26
    ;               shift and go to state 27


state 4

    (2) code -> S .

    Fim             reduce using rule 2 (code -> S .)
    ;               reduce using rule 2 (code -> S .)
    }               reduce using rule 2 (code -> S .)


state 5

    (4) S -> C .

    Fim             reduce using rule 4 (S -> C .)
    ;               reduce using rule 4 (S -> C .)
    }               reduce using rule 4 (S -> C .)


state 6

    (5) S -> E .
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    Fim             reduce using rule 5 (S -> E .)
    ;               reduce using rule 5 (S -> E .)
    }               reduce using rule 5 (S -> E .)
    e               shift and go to state 28
    ou              shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    <               shift and go to state 34
    >               shift and go to state 35


state 7

    (6) S -> A .

    Fim             reduce using rule 6 (S -> A .)
    ;               reduce using rule 6 (S -> A .)
    }               reduce using rule 6 (S -> A .)


state 8

    (7) S -> condicao .

    Fim             reduce using rule 7 (S -> condicao .)
    ;               reduce using rule 7 (S -> condicao .)
    }               reduce using rule 7 (S -> condicao .)


state 9

    (9) C -> escreva . ( e_list ) ;

    (               shift and go to state 36


state 10

    (35) E -> ( . E )
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 37
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 11

    (10) C -> leia . ( var ) ;

    (               shift and go to state 39


state 12

    (34) E -> var .
    (39) E -> var . ( arg_list )
    (40) E -> var . ( )
    (41) E -> var . ( var_list )
    (13) A -> var . atribui E ;

    e               reduce using rule 34 (E -> var .)
    ou              reduce using rule 34 (E -> var .)
    +               reduce using rule 34 (E -> var .)
    -               reduce using rule 34 (E -> var .)
    *               reduce using rule 34 (E -> var .)
    /               reduce using rule 34 (E -> var .)
    <               reduce using rule 34 (E -> var .)
    >               reduce using rule 34 (E -> var .)
    Fim             reduce using rule 34 (E -> var .)
    ;               reduce using rule 34 (E -> var .)
    }               reduce using rule 34 (E -> var .)
    (               shift and go to state 40
    atribui         shift and go to state 41


state 13

    (11) C -> para . var de E ate E { c_list } fim_para

    var             shift and go to state 42


state 14

    (36) E -> B .

    e               reduce using rule 36 (E -> B .)
    ou              reduce using rule 36 (E -> B .)
    +               reduce using rule 36 (E -> B .)
    -               reduce using rule 36 (E -> B .)
    *               reduce using rule 36 (E -> B .)
    /               reduce using rule 36 (E -> B .)
    <               reduce using rule 36 (E -> B .)
    >               reduce using rule 36 (E -> B .)
    Fim             reduce using rule 36 (E -> B .)
    ;               reduce using rule 36 (E -> B .)
    )               reduce using rule 36 (E -> B .)
    entao           reduce using rule 36 (E -> B .)
    }               reduce using rule 36 (E -> B .)
    ,               reduce using rule 36 (E -> B .)
    ate             reduce using rule 36 (E -> B .)
    {               reduce using rule 36 (E -> B .)


state 15

    (37) E -> N .

    e               reduce using rule 37 (E -> N .)
    ou              reduce using rule 37 (E -> N .)
    +               reduce using rule 37 (E -> N .)
    -               reduce using rule 37 (E -> N .)
    *               reduce using rule 37 (E -> N .)
    /               reduce using rule 37 (E -> N .)
    <               reduce using rule 37 (E -> N .)
    >               reduce using rule 37 (E -> N .)
    Fim             reduce using rule 37 (E -> N .)
    ;               reduce using rule 37 (E -> N .)
    )               reduce using rule 37 (E -> N .)
    entao           reduce using rule 37 (E -> N .)
    }               reduce using rule 37 (E -> N .)
    ,               reduce using rule 37 (E -> N .)
    ate             reduce using rule 37 (E -> N .)
    {               reduce using rule 37 (E -> N .)


state 16

    (38) E -> string .

    e               reduce using rule 38 (E -> string .)
    ou              reduce using rule 38 (E -> string .)
    +               reduce using rule 38 (E -> string .)
    -               reduce using rule 38 (E -> string .)
    *               reduce using rule 38 (E -> string .)
    /               reduce using rule 38 (E -> string .)
    <               reduce using rule 38 (E -> string .)
    >               reduce using rule 38 (E -> string .)
    Fim             reduce using rule 38 (E -> string .)
    ;               reduce using rule 38 (E -> string .)
    )               reduce using rule 38 (E -> string .)
    entao           reduce using rule 38 (E -> string .)
    }               reduce using rule 38 (E -> string .)
    ,               reduce using rule 38 (E -> string .)
    ate             reduce using rule 38 (E -> string .)
    {               reduce using rule 38 (E -> string .)


state 17

    (12) A -> fun . var ( args ) { code }

    var             shift and go to state 43


state 18

    (8) condicao -> se . E entao c_list senao c_list fim_se
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 44
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 19

    (27) B -> F .

    e               reduce using rule 27 (B -> F .)
    ou              reduce using rule 27 (B -> F .)
    +               reduce using rule 27 (B -> F .)
    -               reduce using rule 27 (B -> F .)
    *               reduce using rule 27 (B -> F .)
    /               reduce using rule 27 (B -> F .)
    <               reduce using rule 27 (B -> F .)
    >               reduce using rule 27 (B -> F .)
    Fim             reduce using rule 27 (B -> F .)
    ;               reduce using rule 27 (B -> F .)
    )               reduce using rule 27 (B -> F .)
    entao           reduce using rule 27 (B -> F .)
    }               reduce using rule 27 (B -> F .)
    ,               reduce using rule 27 (B -> F .)
    ate             reduce using rule 27 (B -> F .)
    {               reduce using rule 27 (B -> F .)


state 20

    (18) N -> nr .

    e               reduce using rule 18 (N -> nr .)
    ou              reduce using rule 18 (N -> nr .)
    +               reduce using rule 18 (N -> nr .)
    -               reduce using rule 18 (N -> nr .)
    *               reduce using rule 18 (N -> nr .)
    /               reduce using rule 18 (N -> nr .)
    <               reduce using rule 18 (N -> nr .)
    >               reduce using rule 18 (N -> nr .)
    Fim             reduce using rule 18 (N -> nr .)
    ;               reduce using rule 18 (N -> nr .)
    )               reduce using rule 18 (N -> nr .)
    entao           reduce using rule 18 (N -> nr .)
    }               reduce using rule 18 (N -> nr .)
    ,               reduce using rule 18 (N -> nr .)
    ate             reduce using rule 18 (N -> nr .)
    {               reduce using rule 18 (N -> nr .)


state 21

    (25) N -> cos . ( E )

    (               shift and go to state 45


state 22

    (26) N -> sen . ( E )

    (               shift and go to state 46


state 23

    (30) F -> verdadeiro .

    e               reduce using rule 30 (F -> verdadeiro .)
    ou              reduce using rule 30 (F -> verdadeiro .)
    +               reduce using rule 30 (F -> verdadeiro .)
    -               reduce using rule 30 (F -> verdadeiro .)
    *               reduce using rule 30 (F -> verdadeiro .)
    /               reduce using rule 30 (F -> verdadeiro .)
    <               reduce using rule 30 (F -> verdadeiro .)
    >               reduce using rule 30 (F -> verdadeiro .)
    Fim             reduce using rule 30 (F -> verdadeiro .)
    ;               reduce using rule 30 (F -> verdadeiro .)
    )               reduce using rule 30 (F -> verdadeiro .)
    entao           reduce using rule 30 (F -> verdadeiro .)
    }               reduce using rule 30 (F -> verdadeiro .)
    ,               reduce using rule 30 (F -> verdadeiro .)
    ate             reduce using rule 30 (F -> verdadeiro .)
    {               reduce using rule 30 (F -> verdadeiro .)


state 24

    (31) F -> falso .

    e               reduce using rule 31 (F -> falso .)
    ou              reduce using rule 31 (F -> falso .)
    +               reduce using rule 31 (F -> falso .)
    -               reduce using rule 31 (F -> falso .)
    *               reduce using rule 31 (F -> falso .)
    /               reduce using rule 31 (F -> falso .)
    <               reduce using rule 31 (F -> falso .)
    >               reduce using rule 31 (F -> falso .)
    Fim             reduce using rule 31 (F -> falso .)
    ;               reduce using rule 31 (F -> falso .)
    )               reduce using rule 31 (F -> falso .)
    entao           reduce using rule 31 (F -> falso .)
    }               reduce using rule 31 (F -> falso .)
    ,               reduce using rule 31 (F -> falso .)
    ate             reduce using rule 31 (F -> falso .)
    {               reduce using rule 31 (F -> falso .)


state 25

    (32) F -> nao . F
    (33) F -> nao . var
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 48
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    F                              shift and go to state 47

state 26

    (1) axioma -> Inicio code Fim .

    $end            reduce using rule 1 (axioma -> Inicio code Fim .)


state 27

    (3) code -> code ; . S
    (4) S -> . C
    (5) S -> . E
    (6) S -> . A
    (7) S -> . condicao
    (9) C -> . escreva ( e_list ) ;
    (10) C -> . leia ( var ) ;
    (11) C -> . para var de E ate E { c_list } fim_para
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (12) A -> . fun var ( args ) { code }
    (13) A -> . var atribui E ;
    (8) condicao -> . se E entao c_list senao c_list fim_se
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    escreva         shift and go to state 9
    leia            shift and go to state 11
    para            shift and go to state 13
    var             shift and go to state 12
    (               shift and go to state 10
    string          shift and go to state 16
    fun             shift and go to state 17
    se              shift and go to state 18
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    S                              shift and go to state 49
    C                              shift and go to state 5
    E                              shift and go to state 6
    A                              shift and go to state 7
    condicao                       shift and go to state 8
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 28

    (28) B -> E e . E
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 50
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 29

    (29) B -> E ou . E
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 51
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 30

    (19) N -> E + . E
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 52
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 31

    (20) N -> E - . E
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 53
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 32

    (21) N -> E * . E
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 54
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 33

    (22) N -> E / . E
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 55
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 34

    (23) N -> E < . E
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 56
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 35

    (24) N -> E > . E
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 57
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 36

    (9) C -> escreva ( . e_list ) ;
    (14) e_list -> . E
    (15) e_list -> . e_list , E
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    e_list                         shift and go to state 58
    E                              shift and go to state 59
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 37

    (35) E -> ( E . )
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    )               shift and go to state 60
    e               shift and go to state 28
    ou              shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    <               shift and go to state 34
    >               shift and go to state 35


state 38

    (34) E -> var .
    (39) E -> var . ( arg_list )
    (40) E -> var . ( )
    (41) E -> var . ( var_list )

    )               reduce using rule 34 (E -> var .)
    e               reduce using rule 34 (E -> var .)
    ou              reduce using rule 34 (E -> var .)
    +               reduce using rule 34 (E -> var .)
    -               reduce using rule 34 (E -> var .)
    *               reduce using rule 34 (E -> var .)
    /               reduce using rule 34 (E -> var .)
    <               reduce using rule 34 (E -> var .)
    >               reduce using rule 34 (E -> var .)
    entao           reduce using rule 34 (E -> var .)
    Fim             reduce using rule 34 (E -> var .)
    ;               reduce using rule 34 (E -> var .)
    }               reduce using rule 34 (E -> var .)
    ,               reduce using rule 34 (E -> var .)
    ate             reduce using rule 34 (E -> var .)
    {               reduce using rule 34 (E -> var .)
    (               shift and go to state 40


state 39

    (10) C -> leia ( . var ) ;

    var             shift and go to state 61


state 40

    (39) E -> var ( . arg_list )
    (40) E -> var ( . )
    (41) E -> var ( . var_list )
    (46) arg_list -> . E
    (47) arg_list -> . arg_list , E
    (44) var_list -> . var
    (45) var_list -> . var_list , var
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    )               shift and go to state 64
    var             shift and go to state 62
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    arg_list                       shift and go to state 63
    var_list                       shift and go to state 65
    E                              shift and go to state 66
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 41

    (13) A -> var atribui . E ;
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 67
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 42

    (11) C -> para var . de E ate E { c_list } fim_para

    de              shift and go to state 68


state 43

    (12) A -> fun var . ( args ) { code }

    (               shift and go to state 69


state 44

    (8) condicao -> se E . entao c_list senao c_list fim_se
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    entao           shift and go to state 70
    e               shift and go to state 28
    ou              shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    <               shift and go to state 34
    >               shift and go to state 35


state 45

    (25) N -> cos ( . E )
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 71
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 46

    (26) N -> sen ( . E )
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 72
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 47

    (32) F -> nao F .

    e               reduce using rule 32 (F -> nao F .)
    ou              reduce using rule 32 (F -> nao F .)
    +               reduce using rule 32 (F -> nao F .)
    -               reduce using rule 32 (F -> nao F .)
    *               reduce using rule 32 (F -> nao F .)
    /               reduce using rule 32 (F -> nao F .)
    <               reduce using rule 32 (F -> nao F .)
    >               reduce using rule 32 (F -> nao F .)
    Fim             reduce using rule 32 (F -> nao F .)
    ;               reduce using rule 32 (F -> nao F .)
    )               reduce using rule 32 (F -> nao F .)
    entao           reduce using rule 32 (F -> nao F .)
    }               reduce using rule 32 (F -> nao F .)
    ,               reduce using rule 32 (F -> nao F .)
    ate             reduce using rule 32 (F -> nao F .)
    {               reduce using rule 32 (F -> nao F .)


state 48

    (33) F -> nao var .

    e               reduce using rule 33 (F -> nao var .)
    ou              reduce using rule 33 (F -> nao var .)
    +               reduce using rule 33 (F -> nao var .)
    -               reduce using rule 33 (F -> nao var .)
    *               reduce using rule 33 (F -> nao var .)
    /               reduce using rule 33 (F -> nao var .)
    <               reduce using rule 33 (F -> nao var .)
    >               reduce using rule 33 (F -> nao var .)
    Fim             reduce using rule 33 (F -> nao var .)
    ;               reduce using rule 33 (F -> nao var .)
    )               reduce using rule 33 (F -> nao var .)
    entao           reduce using rule 33 (F -> nao var .)
    }               reduce using rule 33 (F -> nao var .)
    ,               reduce using rule 33 (F -> nao var .)
    ate             reduce using rule 33 (F -> nao var .)
    {               reduce using rule 33 (F -> nao var .)


state 49

    (3) code -> code ; S .

    Fim             reduce using rule 3 (code -> code ; S .)
    ;               reduce using rule 3 (code -> code ; S .)
    }               reduce using rule 3 (code -> code ; S .)


state 50

    (28) B -> E e E .
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    e               reduce using rule 28 (B -> E e E .)
    ou              reduce using rule 28 (B -> E e E .)
    Fim             reduce using rule 28 (B -> E e E .)
    ;               reduce using rule 28 (B -> E e E .)
    )               reduce using rule 28 (B -> E e E .)
    entao           reduce using rule 28 (B -> E e E .)
    }               reduce using rule 28 (B -> E e E .)
    ,               reduce using rule 28 (B -> E e E .)
    ate             reduce using rule 28 (B -> E e E .)
    {               reduce using rule 28 (B -> E e E .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    <               shift and go to state 34
    >               shift and go to state 35

  ! +               [ reduce using rule 28 (B -> E e E .) ]
  ! -               [ reduce using rule 28 (B -> E e E .) ]
  ! *               [ reduce using rule 28 (B -> E e E .) ]
  ! /               [ reduce using rule 28 (B -> E e E .) ]
  ! <               [ reduce using rule 28 (B -> E e E .) ]
  ! >               [ reduce using rule 28 (B -> E e E .) ]
  ! e               [ shift and go to state 28 ]
  ! ou              [ shift and go to state 29 ]


state 51

    (29) B -> E ou E .
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    ou              reduce using rule 29 (B -> E ou E .)
    Fim             reduce using rule 29 (B -> E ou E .)
    ;               reduce using rule 29 (B -> E ou E .)
    )               reduce using rule 29 (B -> E ou E .)
    entao           reduce using rule 29 (B -> E ou E .)
    }               reduce using rule 29 (B -> E ou E .)
    ,               reduce using rule 29 (B -> E ou E .)
    ate             reduce using rule 29 (B -> E ou E .)
    {               reduce using rule 29 (B -> E ou E .)
    e               shift and go to state 28
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    <               shift and go to state 34
    >               shift and go to state 35

  ! e               [ reduce using rule 29 (B -> E ou E .) ]
  ! +               [ reduce using rule 29 (B -> E ou E .) ]
  ! -               [ reduce using rule 29 (B -> E ou E .) ]
  ! *               [ reduce using rule 29 (B -> E ou E .) ]
  ! /               [ reduce using rule 29 (B -> E ou E .) ]
  ! <               [ reduce using rule 29 (B -> E ou E .) ]
  ! >               [ reduce using rule 29 (B -> E ou E .) ]
  ! ou              [ shift and go to state 29 ]


state 52

    (19) N -> E + E .
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    e               reduce using rule 19 (N -> E + E .)
    ou              reduce using rule 19 (N -> E + E .)
    +               reduce using rule 19 (N -> E + E .)
    -               reduce using rule 19 (N -> E + E .)
    <               reduce using rule 19 (N -> E + E .)
    >               reduce using rule 19 (N -> E + E .)
    Fim             reduce using rule 19 (N -> E + E .)
    ;               reduce using rule 19 (N -> E + E .)
    )               reduce using rule 19 (N -> E + E .)
    entao           reduce using rule 19 (N -> E + E .)
    }               reduce using rule 19 (N -> E + E .)
    ,               reduce using rule 19 (N -> E + E .)
    ate             reduce using rule 19 (N -> E + E .)
    {               reduce using rule 19 (N -> E + E .)
    *               shift and go to state 32
    /               shift and go to state 33

  ! *               [ reduce using rule 19 (N -> E + E .) ]
  ! /               [ reduce using rule 19 (N -> E + E .) ]
  ! e               [ shift and go to state 28 ]
  ! ou              [ shift and go to state 29 ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! <               [ shift and go to state 34 ]
  ! >               [ shift and go to state 35 ]


state 53

    (20) N -> E - E .
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    e               reduce using rule 20 (N -> E - E .)
    ou              reduce using rule 20 (N -> E - E .)
    +               reduce using rule 20 (N -> E - E .)
    -               reduce using rule 20 (N -> E - E .)
    <               reduce using rule 20 (N -> E - E .)
    >               reduce using rule 20 (N -> E - E .)
    Fim             reduce using rule 20 (N -> E - E .)
    ;               reduce using rule 20 (N -> E - E .)
    )               reduce using rule 20 (N -> E - E .)
    entao           reduce using rule 20 (N -> E - E .)
    }               reduce using rule 20 (N -> E - E .)
    ,               reduce using rule 20 (N -> E - E .)
    ate             reduce using rule 20 (N -> E - E .)
    {               reduce using rule 20 (N -> E - E .)
    *               shift and go to state 32
    /               shift and go to state 33

  ! *               [ reduce using rule 20 (N -> E - E .) ]
  ! /               [ reduce using rule 20 (N -> E - E .) ]
  ! e               [ shift and go to state 28 ]
  ! ou              [ shift and go to state 29 ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! <               [ shift and go to state 34 ]
  ! >               [ shift and go to state 35 ]


state 54

    (21) N -> E * E .
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    e               reduce using rule 21 (N -> E * E .)
    ou              reduce using rule 21 (N -> E * E .)
    +               reduce using rule 21 (N -> E * E .)
    -               reduce using rule 21 (N -> E * E .)
    *               reduce using rule 21 (N -> E * E .)
    /               reduce using rule 21 (N -> E * E .)
    <               reduce using rule 21 (N -> E * E .)
    >               reduce using rule 21 (N -> E * E .)
    Fim             reduce using rule 21 (N -> E * E .)
    ;               reduce using rule 21 (N -> E * E .)
    )               reduce using rule 21 (N -> E * E .)
    entao           reduce using rule 21 (N -> E * E .)
    }               reduce using rule 21 (N -> E * E .)
    ,               reduce using rule 21 (N -> E * E .)
    ate             reduce using rule 21 (N -> E * E .)
    {               reduce using rule 21 (N -> E * E .)

  ! e               [ shift and go to state 28 ]
  ! ou              [ shift and go to state 29 ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]
  ! <               [ shift and go to state 34 ]
  ! >               [ shift and go to state 35 ]


state 55

    (22) N -> E / E .
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    e               reduce using rule 22 (N -> E / E .)
    ou              reduce using rule 22 (N -> E / E .)
    +               reduce using rule 22 (N -> E / E .)
    -               reduce using rule 22 (N -> E / E .)
    *               reduce using rule 22 (N -> E / E .)
    /               reduce using rule 22 (N -> E / E .)
    <               reduce using rule 22 (N -> E / E .)
    >               reduce using rule 22 (N -> E / E .)
    Fim             reduce using rule 22 (N -> E / E .)
    ;               reduce using rule 22 (N -> E / E .)
    )               reduce using rule 22 (N -> E / E .)
    entao           reduce using rule 22 (N -> E / E .)
    }               reduce using rule 22 (N -> E / E .)
    ,               reduce using rule 22 (N -> E / E .)
    ate             reduce using rule 22 (N -> E / E .)
    {               reduce using rule 22 (N -> E / E .)

  ! e               [ shift and go to state 28 ]
  ! ou              [ shift and go to state 29 ]
  ! +               [ shift and go to state 30 ]
  ! -               [ shift and go to state 31 ]
  ! *               [ shift and go to state 32 ]
  ! /               [ shift and go to state 33 ]
  ! <               [ shift and go to state 34 ]
  ! >               [ shift and go to state 35 ]


state 56

    (23) N -> E < E .
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    e               reduce using rule 23 (N -> E < E .)
    ou              reduce using rule 23 (N -> E < E .)
    <               reduce using rule 23 (N -> E < E .)
    >               reduce using rule 23 (N -> E < E .)
    Fim             reduce using rule 23 (N -> E < E .)
    ;               reduce using rule 23 (N -> E < E .)
    )               reduce using rule 23 (N -> E < E .)
    entao           reduce using rule 23 (N -> E < E .)
    }               reduce using rule 23 (N -> E < E .)
    ,               reduce using rule 23 (N -> E < E .)
    ate             reduce using rule 23 (N -> E < E .)
    {               reduce using rule 23 (N -> E < E .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! +               [ reduce using rule 23 (N -> E < E .) ]
  ! -               [ reduce using rule 23 (N -> E < E .) ]
  ! *               [ reduce using rule 23 (N -> E < E .) ]
  ! /               [ reduce using rule 23 (N -> E < E .) ]
  ! e               [ shift and go to state 28 ]
  ! ou              [ shift and go to state 29 ]
  ! <               [ shift and go to state 34 ]
  ! >               [ shift and go to state 35 ]


state 57

    (24) N -> E > E .
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    e               reduce using rule 24 (N -> E > E .)
    ou              reduce using rule 24 (N -> E > E .)
    <               reduce using rule 24 (N -> E > E .)
    >               reduce using rule 24 (N -> E > E .)
    Fim             reduce using rule 24 (N -> E > E .)
    ;               reduce using rule 24 (N -> E > E .)
    )               reduce using rule 24 (N -> E > E .)
    entao           reduce using rule 24 (N -> E > E .)
    }               reduce using rule 24 (N -> E > E .)
    ,               reduce using rule 24 (N -> E > E .)
    ate             reduce using rule 24 (N -> E > E .)
    {               reduce using rule 24 (N -> E > E .)
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33

  ! +               [ reduce using rule 24 (N -> E > E .) ]
  ! -               [ reduce using rule 24 (N -> E > E .) ]
  ! *               [ reduce using rule 24 (N -> E > E .) ]
  ! /               [ reduce using rule 24 (N -> E > E .) ]
  ! e               [ shift and go to state 28 ]
  ! ou              [ shift and go to state 29 ]
  ! <               [ shift and go to state 34 ]
  ! >               [ shift and go to state 35 ]


state 58

    (9) C -> escreva ( e_list . ) ;
    (15) e_list -> e_list . , E

    )               shift and go to state 73
    ,               shift and go to state 74


state 59

    (14) e_list -> E .
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    )               reduce using rule 14 (e_list -> E .)
    ,               reduce using rule 14 (e_list -> E .)
    e               shift and go to state 28
    ou              shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    <               shift and go to state 34
    >               shift and go to state 35


state 60

    (35) E -> ( E ) .

    e               reduce using rule 35 (E -> ( E ) .)
    ou              reduce using rule 35 (E -> ( E ) .)
    +               reduce using rule 35 (E -> ( E ) .)
    -               reduce using rule 35 (E -> ( E ) .)
    *               reduce using rule 35 (E -> ( E ) .)
    /               reduce using rule 35 (E -> ( E ) .)
    <               reduce using rule 35 (E -> ( E ) .)
    >               reduce using rule 35 (E -> ( E ) .)
    Fim             reduce using rule 35 (E -> ( E ) .)
    ;               reduce using rule 35 (E -> ( E ) .)
    )               reduce using rule 35 (E -> ( E ) .)
    entao           reduce using rule 35 (E -> ( E ) .)
    }               reduce using rule 35 (E -> ( E ) .)
    ,               reduce using rule 35 (E -> ( E ) .)
    ate             reduce using rule 35 (E -> ( E ) .)
    {               reduce using rule 35 (E -> ( E ) .)


state 61

    (10) C -> leia ( var . ) ;

    )               shift and go to state 75


state 62

    (44) var_list -> var .
    (34) E -> var .
    (39) E -> var . ( arg_list )
    (40) E -> var . ( )
    (41) E -> var . ( var_list )

  ! reduce/reduce conflict for ) resolved using rule 34 (E -> var .)
  ! reduce/reduce conflict for , resolved using rule 34 (E -> var .)
    e               reduce using rule 34 (E -> var .)
    ou              reduce using rule 34 (E -> var .)
    +               reduce using rule 34 (E -> var .)
    -               reduce using rule 34 (E -> var .)
    *               reduce using rule 34 (E -> var .)
    /               reduce using rule 34 (E -> var .)
    <               reduce using rule 34 (E -> var .)
    >               reduce using rule 34 (E -> var .)
    )               reduce using rule 34 (E -> var .)
    ,               reduce using rule 34 (E -> var .)
    (               shift and go to state 40

  ! )               [ reduce using rule 44 (var_list -> var .) ]
  ! ,               [ reduce using rule 44 (var_list -> var .) ]


state 63

    (39) E -> var ( arg_list . )
    (47) arg_list -> arg_list . , E

    )               shift and go to state 76
    ,               shift and go to state 77


state 64

    (40) E -> var ( ) .

    e               reduce using rule 40 (E -> var ( ) .)
    ou              reduce using rule 40 (E -> var ( ) .)
    +               reduce using rule 40 (E -> var ( ) .)
    -               reduce using rule 40 (E -> var ( ) .)
    *               reduce using rule 40 (E -> var ( ) .)
    /               reduce using rule 40 (E -> var ( ) .)
    <               reduce using rule 40 (E -> var ( ) .)
    >               reduce using rule 40 (E -> var ( ) .)
    Fim             reduce using rule 40 (E -> var ( ) .)
    ;               reduce using rule 40 (E -> var ( ) .)
    )               reduce using rule 40 (E -> var ( ) .)
    entao           reduce using rule 40 (E -> var ( ) .)
    }               reduce using rule 40 (E -> var ( ) .)
    ,               reduce using rule 40 (E -> var ( ) .)
    ate             reduce using rule 40 (E -> var ( ) .)
    {               reduce using rule 40 (E -> var ( ) .)


state 65

    (41) E -> var ( var_list . )
    (45) var_list -> var_list . , var

    )               shift and go to state 78
    ,               shift and go to state 79


state 66

    (46) arg_list -> E .
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    )               reduce using rule 46 (arg_list -> E .)
    ,               reduce using rule 46 (arg_list -> E .)
    e               shift and go to state 28
    ou              shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    <               shift and go to state 34
    >               shift and go to state 35


state 67

    (13) A -> var atribui E . ;
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    ;               shift and go to state 80
    e               shift and go to state 28
    ou              shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    <               shift and go to state 34
    >               shift and go to state 35


state 68

    (11) C -> para var de . E ate E { c_list } fim_para
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 81
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 69

    (12) A -> fun var ( . args ) { code }
    (42) args -> .
    (43) args -> . var_list
    (44) var_list -> . var
    (45) var_list -> . var_list , var

    )               reduce using rule 42 (args -> .)
    var             shift and go to state 82

    args                           shift and go to state 83
    var_list                       shift and go to state 84

state 70

    (8) condicao -> se E entao . c_list senao c_list fim_se
    (16) c_list -> . C
    (17) c_list -> . c_list ; C
    (9) C -> . escreva ( e_list ) ;
    (10) C -> . leia ( var ) ;
    (11) C -> . para var de E ate E { c_list } fim_para

    escreva         shift and go to state 9
    leia            shift and go to state 11
    para            shift and go to state 13

    c_list                         shift and go to state 85
    C                              shift and go to state 86

state 71

    (25) N -> cos ( E . )
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    )               shift and go to state 87
    e               shift and go to state 28
    ou              shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    <               shift and go to state 34
    >               shift and go to state 35


state 72

    (26) N -> sen ( E . )
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    )               shift and go to state 88
    e               shift and go to state 28
    ou              shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    <               shift and go to state 34
    >               shift and go to state 35


state 73

    (9) C -> escreva ( e_list ) . ;

    ;               shift and go to state 89


state 74

    (15) e_list -> e_list , . E
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 90
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 75

    (10) C -> leia ( var ) . ;

    ;               shift and go to state 91


state 76

    (39) E -> var ( arg_list ) .

    e               reduce using rule 39 (E -> var ( arg_list ) .)
    ou              reduce using rule 39 (E -> var ( arg_list ) .)
    +               reduce using rule 39 (E -> var ( arg_list ) .)
    -               reduce using rule 39 (E -> var ( arg_list ) .)
    *               reduce using rule 39 (E -> var ( arg_list ) .)
    /               reduce using rule 39 (E -> var ( arg_list ) .)
    <               reduce using rule 39 (E -> var ( arg_list ) .)
    >               reduce using rule 39 (E -> var ( arg_list ) .)
    Fim             reduce using rule 39 (E -> var ( arg_list ) .)
    ;               reduce using rule 39 (E -> var ( arg_list ) .)
    )               reduce using rule 39 (E -> var ( arg_list ) .)
    entao           reduce using rule 39 (E -> var ( arg_list ) .)
    }               reduce using rule 39 (E -> var ( arg_list ) .)
    ,               reduce using rule 39 (E -> var ( arg_list ) .)
    ate             reduce using rule 39 (E -> var ( arg_list ) .)
    {               reduce using rule 39 (E -> var ( arg_list ) .)


state 77

    (47) arg_list -> arg_list , . E
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 92
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 78

    (41) E -> var ( var_list ) .

    e               reduce using rule 41 (E -> var ( var_list ) .)
    ou              reduce using rule 41 (E -> var ( var_list ) .)
    +               reduce using rule 41 (E -> var ( var_list ) .)
    -               reduce using rule 41 (E -> var ( var_list ) .)
    *               reduce using rule 41 (E -> var ( var_list ) .)
    /               reduce using rule 41 (E -> var ( var_list ) .)
    <               reduce using rule 41 (E -> var ( var_list ) .)
    >               reduce using rule 41 (E -> var ( var_list ) .)
    Fim             reduce using rule 41 (E -> var ( var_list ) .)
    ;               reduce using rule 41 (E -> var ( var_list ) .)
    )               reduce using rule 41 (E -> var ( var_list ) .)
    entao           reduce using rule 41 (E -> var ( var_list ) .)
    }               reduce using rule 41 (E -> var ( var_list ) .)
    ,               reduce using rule 41 (E -> var ( var_list ) .)
    ate             reduce using rule 41 (E -> var ( var_list ) .)
    {               reduce using rule 41 (E -> var ( var_list ) .)


state 79

    (45) var_list -> var_list , . var

    var             shift and go to state 93


state 80

    (13) A -> var atribui E ; .

    Fim             reduce using rule 13 (A -> var atribui E ; .)
    ;               reduce using rule 13 (A -> var atribui E ; .)
    }               reduce using rule 13 (A -> var atribui E ; .)


state 81

    (11) C -> para var de E . ate E { c_list } fim_para
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    ate             shift and go to state 94
    e               shift and go to state 28
    ou              shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    <               shift and go to state 34
    >               shift and go to state 35


state 82

    (44) var_list -> var .

    ,               reduce using rule 44 (var_list -> var .)
    )               reduce using rule 44 (var_list -> var .)


state 83

    (12) A -> fun var ( args . ) { code }

    )               shift and go to state 95


state 84

    (43) args -> var_list .
    (45) var_list -> var_list . , var

    )               reduce using rule 43 (args -> var_list .)
    ,               shift and go to state 79


state 85

    (8) condicao -> se E entao c_list . senao c_list fim_se
    (17) c_list -> c_list . ; C

    senao           shift and go to state 96
    ;               shift and go to state 97


state 86

    (16) c_list -> C .

    senao           reduce using rule 16 (c_list -> C .)
    ;               reduce using rule 16 (c_list -> C .)
    fim_se          reduce using rule 16 (c_list -> C .)
    }               reduce using rule 16 (c_list -> C .)


state 87

    (25) N -> cos ( E ) .

    e               reduce using rule 25 (N -> cos ( E ) .)
    ou              reduce using rule 25 (N -> cos ( E ) .)
    +               reduce using rule 25 (N -> cos ( E ) .)
    -               reduce using rule 25 (N -> cos ( E ) .)
    *               reduce using rule 25 (N -> cos ( E ) .)
    /               reduce using rule 25 (N -> cos ( E ) .)
    <               reduce using rule 25 (N -> cos ( E ) .)
    >               reduce using rule 25 (N -> cos ( E ) .)
    Fim             reduce using rule 25 (N -> cos ( E ) .)
    ;               reduce using rule 25 (N -> cos ( E ) .)
    )               reduce using rule 25 (N -> cos ( E ) .)
    entao           reduce using rule 25 (N -> cos ( E ) .)
    }               reduce using rule 25 (N -> cos ( E ) .)
    ,               reduce using rule 25 (N -> cos ( E ) .)
    ate             reduce using rule 25 (N -> cos ( E ) .)
    {               reduce using rule 25 (N -> cos ( E ) .)


state 88

    (26) N -> sen ( E ) .

    e               reduce using rule 26 (N -> sen ( E ) .)
    ou              reduce using rule 26 (N -> sen ( E ) .)
    +               reduce using rule 26 (N -> sen ( E ) .)
    -               reduce using rule 26 (N -> sen ( E ) .)
    *               reduce using rule 26 (N -> sen ( E ) .)
    /               reduce using rule 26 (N -> sen ( E ) .)
    <               reduce using rule 26 (N -> sen ( E ) .)
    >               reduce using rule 26 (N -> sen ( E ) .)
    Fim             reduce using rule 26 (N -> sen ( E ) .)
    ;               reduce using rule 26 (N -> sen ( E ) .)
    )               reduce using rule 26 (N -> sen ( E ) .)
    entao           reduce using rule 26 (N -> sen ( E ) .)
    }               reduce using rule 26 (N -> sen ( E ) .)
    ,               reduce using rule 26 (N -> sen ( E ) .)
    ate             reduce using rule 26 (N -> sen ( E ) .)
    {               reduce using rule 26 (N -> sen ( E ) .)


state 89

    (9) C -> escreva ( e_list ) ; .

    Fim             reduce using rule 9 (C -> escreva ( e_list ) ; .)
    ;               reduce using rule 9 (C -> escreva ( e_list ) ; .)
    }               reduce using rule 9 (C -> escreva ( e_list ) ; .)
    senao           reduce using rule 9 (C -> escreva ( e_list ) ; .)
    fim_se          reduce using rule 9 (C -> escreva ( e_list ) ; .)


state 90

    (15) e_list -> e_list , E .
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    )               reduce using rule 15 (e_list -> e_list , E .)
    ,               reduce using rule 15 (e_list -> e_list , E .)
    e               shift and go to state 28
    ou              shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    <               shift and go to state 34
    >               shift and go to state 35


state 91

    (10) C -> leia ( var ) ; .

    Fim             reduce using rule 10 (C -> leia ( var ) ; .)
    ;               reduce using rule 10 (C -> leia ( var ) ; .)
    }               reduce using rule 10 (C -> leia ( var ) ; .)
    senao           reduce using rule 10 (C -> leia ( var ) ; .)
    fim_se          reduce using rule 10 (C -> leia ( var ) ; .)


state 92

    (47) arg_list -> arg_list , E .
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    )               reduce using rule 47 (arg_list -> arg_list , E .)
    ,               reduce using rule 47 (arg_list -> arg_list , E .)
    e               shift and go to state 28
    ou              shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    <               shift and go to state 34
    >               shift and go to state 35


state 93

    (45) var_list -> var_list , var .

    )               reduce using rule 45 (var_list -> var_list , var .)
    ,               reduce using rule 45 (var_list -> var_list , var .)


state 94

    (11) C -> para var de E ate . E { c_list } fim_para
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    var             shift and go to state 38
    (               shift and go to state 10
    string          shift and go to state 16
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    E                              shift and go to state 98
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 95

    (12) A -> fun var ( args ) . { code }

    {               shift and go to state 99


state 96

    (8) condicao -> se E entao c_list senao . c_list fim_se
    (16) c_list -> . C
    (17) c_list -> . c_list ; C
    (9) C -> . escreva ( e_list ) ;
    (10) C -> . leia ( var ) ;
    (11) C -> . para var de E ate E { c_list } fim_para

    escreva         shift and go to state 9
    leia            shift and go to state 11
    para            shift and go to state 13

    c_list                         shift and go to state 100
    C                              shift and go to state 86

state 97

    (17) c_list -> c_list ; . C
    (9) C -> . escreva ( e_list ) ;
    (10) C -> . leia ( var ) ;
    (11) C -> . para var de E ate E { c_list } fim_para

    escreva         shift and go to state 9
    leia            shift and go to state 11
    para            shift and go to state 13

    C                              shift and go to state 101

state 98

    (11) C -> para var de E ate E . { c_list } fim_para
    (28) B -> E . e E
    (29) B -> E . ou E
    (19) N -> E . + E
    (20) N -> E . - E
    (21) N -> E . * E
    (22) N -> E . / E
    (23) N -> E . < E
    (24) N -> E . > E

    {               shift and go to state 102
    e               shift and go to state 28
    ou              shift and go to state 29
    +               shift and go to state 30
    -               shift and go to state 31
    *               shift and go to state 32
    /               shift and go to state 33
    <               shift and go to state 34
    >               shift and go to state 35


state 99

    (12) A -> fun var ( args ) { . code }
    (2) code -> . S
    (3) code -> . code ; S
    (4) S -> . C
    (5) S -> . E
    (6) S -> . A
    (7) S -> . condicao
    (9) C -> . escreva ( e_list ) ;
    (10) C -> . leia ( var ) ;
    (11) C -> . para var de E ate E { c_list } fim_para
    (34) E -> . var
    (35) E -> . ( E )
    (36) E -> . B
    (37) E -> . N
    (38) E -> . string
    (39) E -> . var ( arg_list )
    (40) E -> . var ( )
    (41) E -> . var ( var_list )
    (12) A -> . fun var ( args ) { code }
    (13) A -> . var atribui E ;
    (8) condicao -> . se E entao c_list senao c_list fim_se
    (27) B -> . F
    (28) B -> . E e E
    (29) B -> . E ou E
    (18) N -> . nr
    (19) N -> . E + E
    (20) N -> . E - E
    (21) N -> . E * E
    (22) N -> . E / E
    (23) N -> . E < E
    (24) N -> . E > E
    (25) N -> . cos ( E )
    (26) N -> . sen ( E )
    (30) F -> . verdadeiro
    (31) F -> . falso
    (32) F -> . nao F
    (33) F -> . nao var

    escreva         shift and go to state 9
    leia            shift and go to state 11
    para            shift and go to state 13
    var             shift and go to state 12
    (               shift and go to state 10
    string          shift and go to state 16
    fun             shift and go to state 17
    se              shift and go to state 18
    nr              shift and go to state 20
    cos             shift and go to state 21
    sen             shift and go to state 22
    verdadeiro      shift and go to state 23
    falso           shift and go to state 24
    nao             shift and go to state 25

    code                           shift and go to state 103
    S                              shift and go to state 4
    C                              shift and go to state 5
    E                              shift and go to state 6
    A                              shift and go to state 7
    condicao                       shift and go to state 8
    B                              shift and go to state 14
    N                              shift and go to state 15
    F                              shift and go to state 19

state 100

    (8) condicao -> se E entao c_list senao c_list . fim_se
    (17) c_list -> c_list . ; C

    fim_se          shift and go to state 104
    ;               shift and go to state 97


state 101

    (17) c_list -> c_list ; C .

    senao           reduce using rule 17 (c_list -> c_list ; C .)
    ;               reduce using rule 17 (c_list -> c_list ; C .)
    fim_se          reduce using rule 17 (c_list -> c_list ; C .)
    }               reduce using rule 17 (c_list -> c_list ; C .)


state 102

    (11) C -> para var de E ate E { . c_list } fim_para
    (16) c_list -> . C
    (17) c_list -> . c_list ; C
    (9) C -> . escreva ( e_list ) ;
    (10) C -> . leia ( var ) ;
    (11) C -> . para var de E ate E { c_list } fim_para

    escreva         shift and go to state 9
    leia            shift and go to state 11
    para            shift and go to state 13

    c_list                         shift and go to state 105
    C                              shift and go to state 86

state 103

    (12) A -> fun var ( args ) { code . }
    (3) code -> code . ; S

    }               shift and go to state 106
    ;               shift and go to state 27


state 104

    (8) condicao -> se E entao c_list senao c_list fim_se .

    Fim             reduce using rule 8 (condicao -> se E entao c_list senao c_list fim_se .)
    ;               reduce using rule 8 (condicao -> se E entao c_list senao c_list fim_se .)
    }               reduce using rule 8 (condicao -> se E entao c_list senao c_list fim_se .)


state 105

    (11) C -> para var de E ate E { c_list . } fim_para
    (17) c_list -> c_list . ; C

    }               shift and go to state 107
    ;               shift and go to state 97


state 106

    (12) A -> fun var ( args ) { code } .

    Fim             reduce using rule 12 (A -> fun var ( args ) { code } .)
    ;               reduce using rule 12 (A -> fun var ( args ) { code } .)
    }               reduce using rule 12 (A -> fun var ( args ) { code } .)


state 107

    (11) C -> para var de E ate E { c_list } . fim_para

    fim_para        shift and go to state 108


state 108

    (11) C -> para var de E ate E { c_list } fim_para .

    Fim             reduce using rule 11 (C -> para var de E ate E { c_list } fim_para .)
    ;               reduce using rule 11 (C -> para var de E ate E { c_list } fim_para .)
    }               reduce using rule 11 (C -> para var de E ate E { c_list } fim_para .)
    senao           reduce using rule 11 (C -> para var de E ate E { c_list } fim_para .)
    fim_se          reduce using rule 11 (C -> para var de E ate E { c_list } fim_para .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 62 resolved using rule (E -> var)
WARNING: rejected rule (var_list -> var) in state 62
