
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "left+-left*/rightuminusleftoulefteatribui e ellipsis endfor escreva falso for leia nao nr ou string var verdadeiro code : r  code : code ';' r  ciclo : for var '[' n ellipsis n ']' code ';' endfor  r : a\n              | ciclo  r : var atribui ar : escreva a_lista_list : a\n                  | a_list ',' a  n : nr\n              | '-' a  %prec uminus   n : a '+' a\n              | a '-' a\n              | a '*' a\n              | a '/' a\n              | a 't' a b : f\n              | a ou a\n              | a e a  f : verdadeiro  f : falso  f : nao f  a : var  a : '(' a ')'  a : b\n              | n\n              | string "
    
_lr_action_items = {'var':([0,6,7,11,14,18,19,20,21,22,23,24,25,26,43,45,49,51,53,],[5,29,29,31,29,5,29,29,29,29,29,29,29,29,29,29,29,5,5,]),'escreva':([0,18,51,53,],[6,6,6,6,]),'(':([0,6,7,14,18,19,20,21,22,23,24,25,26,43,45,49,51,53,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'string':([0,6,7,14,18,19,20,21,22,23,24,25,26,43,45,49,51,53,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'for':([0,18,51,53,],[11,11,11,11,]),'nr':([0,6,7,14,18,19,20,21,22,23,24,25,26,43,45,49,51,53,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'-':([0,3,5,6,7,8,9,10,12,13,14,15,16,18,19,20,21,22,23,24,25,26,28,29,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,53,],[14,22,-23,14,14,-25,-26,-27,-17,-10,14,-20,-21,14,14,14,14,14,14,14,14,14,22,-23,22,-11,-22,-18,-19,-12,-13,-14,-15,22,22,14,-24,14,22,-26,22,14,-26,14,14,]),'verdadeiro':([0,6,7,14,17,18,19,20,21,22,23,24,25,26,43,45,49,51,53,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'falso':([0,6,7,14,17,18,19,20,21,22,23,24,25,26,43,45,49,51,53,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'nao':([0,6,7,14,17,18,19,20,21,22,23,24,25,26,43,45,49,51,53,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'$end':([1,2,3,4,5,8,9,10,12,13,15,16,27,28,29,32,33,34,35,36,37,38,39,40,41,42,44,46,54,],[0,-1,-4,-5,-23,-25,-26,-27,-17,-10,-20,-21,-7,-8,-23,-11,-22,-2,-18,-19,-12,-13,-14,-15,-16,-6,-24,-9,-3,]),';':([1,2,3,4,5,8,9,10,12,13,15,16,27,28,29,32,33,34,35,36,37,38,39,40,41,42,44,46,52,54,],[18,-1,-4,-5,-23,-25,-26,-27,-17,-10,-20,-21,-7,-8,-23,-11,-22,-2,-18,-19,-12,-13,-14,-15,-16,-6,-24,-9,53,-3,]),'ou':([3,5,8,9,10,12,13,15,16,28,29,30,32,33,35,36,37,38,39,40,41,42,44,46,47,48,50,],[19,-23,-25,-26,-27,-17,-10,-20,-21,19,-23,19,19,-22,-18,-19,19,19,19,19,19,19,-24,19,-26,19,-26,]),'e':([3,5,8,9,10,12,13,15,16,28,29,30,32,33,35,36,37,38,39,40,41,42,44,46,47,48,50,],[20,-23,-25,-26,-27,-17,-10,-20,-21,20,-23,20,20,-22,20,-19,20,20,20,20,20,20,-24,20,-26,20,-26,]),'+':([3,5,8,9,10,12,13,15,16,28,29,30,32,33,35,36,37,38,39,40,41,42,44,46,47,48,50,],[21,-23,-25,-26,-27,-17,-10,-20,-21,21,-23,21,-11,-22,-18,-19,-12,-13,-14,-15,21,21,-24,21,-26,21,-26,]),'*':([3,5,8,9,10,12,13,15,16,28,29,30,32,33,35,36,37,38,39,40,41,42,44,46,47,48,50,],[23,-23,-25,-26,-27,-17,-10,-20,-21,23,-23,23,-11,-22,-18,-19,23,23,-14,-15,23,23,-24,23,-26,23,-26,]),'/':([3,5,8,9,10,12,13,15,16,28,29,30,32,33,35,36,37,38,39,40,41,42,44,46,47,48,50,],[24,-23,-25,-26,-27,-17,-10,-20,-21,24,-23,24,-11,-22,-18,-19,24,24,-14,-15,24,24,-24,24,-26,24,-26,]),'t':([3,5,8,9,10,12,13,15,16,28,29,30,32,33,35,36,37,38,39,40,41,42,44,46,47,48,50,],[25,-23,-25,-26,-27,-17,-10,-20,-21,25,-23,25,-11,-22,-18,-19,-12,-13,-14,-15,25,25,-24,25,-26,25,-26,]),'atribui':([5,],[26,]),',':([8,9,10,12,13,15,16,27,28,29,32,33,35,36,37,38,39,40,41,44,46,],[-25,-26,-27,-17,-10,-20,-21,43,-8,-23,-11,-22,-18,-19,-12,-13,-14,-15,-16,-24,-9,]),')':([8,9,10,12,13,15,16,29,30,32,33,35,36,37,38,39,40,41,44,],[-25,-26,-27,-17,-10,-20,-21,-23,44,-11,-22,-18,-19,-12,-13,-14,-15,-16,-24,]),'ellipsis':([8,9,10,12,13,15,16,29,32,33,35,36,37,38,39,40,41,44,47,],[-25,-26,-27,-17,-10,-20,-21,-23,-11,-22,-18,-19,-12,-13,-14,-15,-16,-24,49,]),']':([8,9,10,12,13,15,16,29,32,33,35,36,37,38,39,40,41,44,50,],[-25,-26,-27,-17,-10,-20,-21,-23,-11,-22,-18,-19,-12,-13,-14,-15,-16,-24,51,]),'[':([31,],[45,]),'endfor':([53,],[54,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,51,],[1,52,]),'r':([0,18,51,53,],[2,34,2,34,]),'a':([0,6,7,14,18,19,20,21,22,23,24,25,26,43,45,49,51,53,],[3,28,30,32,3,35,36,37,38,39,40,41,42,46,48,48,3,3,]),'ciclo':([0,18,51,53,],[4,4,4,4,]),'b':([0,6,7,14,18,19,20,21,22,23,24,25,26,43,45,49,51,53,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'n':([0,6,7,14,18,19,20,21,22,23,24,25,26,43,45,49,51,53,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,47,50,9,9,]),'f':([0,6,7,14,17,18,19,20,21,22,23,24,25,26,43,45,49,51,53,],[12,12,12,12,33,12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'a_list':([6,],[27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> r','code',1,'p_code1','logic_grammar.py',28),
  ('code -> code ; r','code',3,'p_code2','logic_grammar.py',32),
  ('ciclo -> for var [ n ellipsis n ] code ; endfor','ciclo',10,'p_ciclo','logic_grammar.py',37),
  ('r -> a','r',1,'p_r1','logic_grammar.py',47),
  ('r -> ciclo','r',1,'p_r1','logic_grammar.py',48),
  ('r -> var atribui a','r',3,'p_r2','logic_grammar.py',52),
  ('r -> escreva a_list','r',2,'p_r3','logic_grammar.py',56),
  ('a_list -> a','a_list',1,'p_a_list','logic_grammar.py',64),
  ('a_list -> a_list , a','a_list',3,'p_a_list','logic_grammar.py',65),
  ('n -> nr','n',1,'p_n1','logic_grammar.py',72),
  ('n -> - a','n',2,'p_n1','logic_grammar.py',73),
  ('n -> a + a','n',3,'p_n2','logic_grammar.py',77),
  ('n -> a - a','n',3,'p_n2','logic_grammar.py',78),
  ('n -> a * a','n',3,'p_n2','logic_grammar.py',79),
  ('n -> a / a','n',3,'p_n2','logic_grammar.py',80),
  ('n -> a t a','n',3,'p_n2','logic_grammar.py',81),
  ('b -> f','b',1,'p_b1','logic_grammar.py',85),
  ('b -> a ou a','b',3,'p_b1','logic_grammar.py',86),
  ('b -> a e a','b',3,'p_b1','logic_grammar.py',87),
  ('f -> verdadeiro','f',1,'p_f1','logic_grammar.py',94),
  ('f -> falso','f',1,'p_f2','logic_grammar.py',98),
  ('f -> nao f','f',2,'p_f3','logic_grammar.py',102),
  ('a -> var','a',1,'p_a1','logic_grammar.py',106),
  ('a -> ( a )','a',3,'p_a2','logic_grammar.py',110),
  ('a -> b','a',1,'p_a3','logic_grammar.py',114),
  ('a -> n','a',1,'p_a3','logic_grammar.py',115),
  ('a -> string','a',1,'p_a3','logic_grammar.py',116),
]
