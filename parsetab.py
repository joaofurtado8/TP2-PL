
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftoulefteleft+-left*/Fim Inicio atribui caracter e ellipsis endfor escreva falso for inteiro leia logico nao nr ou real string var verdadeiro code : Inicio ':' S ':' Fim code : Inicio ':' code ';' S ':' FimS : E\n             | CC : escreva '(' e_list ')' ';'C : leia '(' var ')' ';' C : var atribui E  e_list : E\n                   | string  e_list : e_list ',' E\n                   | e_list ',' string N : nr N : E '+' E\n             | E '-' E\n             | E '*' E\n             | E '/' E B : FB : E e E\n             | E ou E F : verdadeiro  F : falso  F : nao F\n              | nao var args :\n                 | var_list  var_list : var\n                     | var_list ',' var  arg_list : E\n                     | arg_list ',' E E : B\n             | N\n             | var\n             | '(' E ')'  E : var '(' arg_list ')'\n              | var '(' ')' "
    
_lr_action_items = {'Inicio':([0,3,],[2,2,]),'$end':([1,35,58,],[0,-1,-2,]),':':([2,4,6,7,8,9,10,14,15,16,17,30,33,34,36,37,38,39,40,41,42,44,46,47,53,60,63,],[3,19,-3,-4,-30,-31,-32,-17,-12,-20,-21,-32,-22,-23,52,-18,-19,-13,-14,-15,-16,-35,-7,-33,-34,-5,-6,]),'var':([3,11,18,20,21,22,23,24,25,26,27,28,31,32,54,56,],[10,30,34,10,30,30,30,30,30,30,30,30,30,51,30,30,]),'(':([3,10,11,12,13,20,21,22,23,24,25,26,27,28,30,31,54,56,],[11,27,11,31,32,11,11,11,11,11,11,11,11,11,27,11,11,11,]),'escreva':([3,20,],[12,12,]),'leia':([3,20,],[13,13,]),'nr':([3,11,20,21,22,23,24,25,26,27,28,31,54,56,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'verdadeiro':([3,11,18,20,21,22,23,24,25,26,27,28,31,54,56,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'falso':([3,11,18,20,21,22,23,24,25,26,27,28,31,54,56,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'nao':([3,11,18,20,21,22,23,24,25,26,27,28,31,54,56,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),';':([5,35,55,57,58,],[20,-1,60,63,-2,]),'e':([6,8,9,10,14,15,16,17,29,30,33,34,37,38,39,40,41,42,44,45,46,47,49,53,59,61,],[21,-30,-31,-32,-17,-12,-20,-21,21,-32,-22,-23,-18,21,-13,-14,-15,-16,-35,21,21,-33,21,-34,21,21,]),'ou':([6,8,9,10,14,15,16,17,29,30,33,34,37,38,39,40,41,42,44,45,46,47,49,53,59,61,],[22,-30,-31,-32,-17,-12,-20,-21,22,-32,-22,-23,-18,-19,-13,-14,-15,-16,-35,22,22,-33,22,-34,22,22,]),'+':([6,8,9,10,14,15,16,17,29,30,33,34,37,38,39,40,41,42,44,45,46,47,49,53,59,61,],[23,-30,-31,-32,-17,-12,-20,-21,23,-32,-22,-23,23,23,-13,-14,-15,-16,-35,23,23,-33,23,-34,23,23,]),'-':([6,8,9,10,14,15,16,17,29,30,33,34,37,38,39,40,41,42,44,45,46,47,49,53,59,61,],[24,-30,-31,-32,-17,-12,-20,-21,24,-32,-22,-23,24,24,-13,-14,-15,-16,-35,24,24,-33,24,-34,24,24,]),'*':([6,8,9,10,14,15,16,17,29,30,33,34,37,38,39,40,41,42,44,45,46,47,49,53,59,61,],[25,-30,-31,-32,-17,-12,-20,-21,25,-32,-22,-23,25,25,25,25,-15,-16,-35,25,25,-33,25,-34,25,25,]),'/':([6,8,9,10,14,15,16,17,29,30,33,34,37,38,39,40,41,42,44,45,46,47,49,53,59,61,],[26,-30,-31,-32,-17,-12,-20,-21,26,-32,-22,-23,26,26,26,26,-15,-16,-35,26,26,-33,26,-34,26,26,]),')':([8,9,14,15,16,17,27,29,30,33,34,37,38,39,40,41,42,43,44,45,47,48,49,50,51,53,59,61,62,],[-30,-31,-17,-12,-20,-21,44,47,-32,-22,-23,-18,-19,-13,-14,-15,-16,53,-35,-28,-33,55,-8,-9,57,-34,-29,-10,-11,]),',':([8,9,14,15,16,17,30,33,34,37,38,39,40,41,42,43,44,45,47,48,49,50,53,59,61,62,],[-30,-31,-17,-12,-20,-21,-32,-22,-23,-18,-19,-13,-14,-15,-16,54,-35,-28,-33,56,-8,-9,-34,-29,-10,-11,]),'atribui':([10,],[28,]),'Fim':([19,52,],[35,58,]),'string':([31,56,],[50,62,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,3,],[1,5,]),'S':([3,20,],[4,36,]),'E':([3,11,20,21,22,23,24,25,26,27,28,31,54,56,],[6,29,6,37,38,39,40,41,42,45,46,49,59,61,]),'C':([3,20,],[7,7,]),'B':([3,11,20,21,22,23,24,25,26,27,28,31,54,56,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'N':([3,11,20,21,22,23,24,25,26,27,28,31,54,56,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'F':([3,11,18,20,21,22,23,24,25,26,27,28,31,54,56,],[14,14,33,14,14,14,14,14,14,14,14,14,14,14,14,]),'arg_list':([27,],[43,]),'e_list':([31,],[48,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> Inicio : S : Fim','code',5,'p_code0','logic_grammar.py',24),
  ('code -> Inicio : code ; S : Fim','code',7,'p_code1','logic_grammar.py',28),
  ('S -> E','S',1,'p_s0','logic_grammar.py',33),
  ('S -> C','S',1,'p_s0','logic_grammar.py',34),
  ('C -> escreva ( e_list ) ;','C',5,'p_c0','logic_grammar.py',38),
  ('C -> leia ( var ) ;','C',5,'p_c1','logic_grammar.py',42),
  ('C -> var atribui E','C',3,'p_c2','logic_grammar.py',46),
  ('e_list -> E','e_list',1,'p_elist0','logic_grammar.py',50),
  ('e_list -> string','e_list',1,'p_elist0','logic_grammar.py',51),
  ('e_list -> e_list , E','e_list',3,'p_elist1','logic_grammar.py',55),
  ('e_list -> e_list , string','e_list',3,'p_elist1','logic_grammar.py',56),
  ('N -> nr','N',1,'p_n1','logic_grammar.py',61),
  ('N -> E + E','N',3,'p_n2','logic_grammar.py',65),
  ('N -> E - E','N',3,'p_n2','logic_grammar.py',66),
  ('N -> E * E','N',3,'p_n2','logic_grammar.py',67),
  ('N -> E / E','N',3,'p_n2','logic_grammar.py',68),
  ('B -> F','B',1,'p_b0','logic_grammar.py',72),
  ('B -> E e E','B',3,'p_b1','logic_grammar.py',76),
  ('B -> E ou E','B',3,'p_b1','logic_grammar.py',77),
  ('F -> verdadeiro','F',1,'p_f1','logic_grammar.py',81),
  ('F -> falso','F',1,'p_f2','logic_grammar.py',85),
  ('F -> nao F','F',2,'p_f3','logic_grammar.py',89),
  ('F -> nao var','F',2,'p_f3','logic_grammar.py',90),
  ('args -> <empty>','args',0,'p_args','logic_grammar.py',94),
  ('args -> var_list','args',1,'p_args','logic_grammar.py',95),
  ('var_list -> var','var_list',1,'p_var_list','logic_grammar.py',102),
  ('var_list -> var_list , var','var_list',3,'p_var_list','logic_grammar.py',103),
  ('arg_list -> E','arg_list',1,'p_arg_list','logic_grammar.py',111),
  ('arg_list -> arg_list , E','arg_list',3,'p_arg_list','logic_grammar.py',112),
  ('E -> B','E',1,'p_E0','logic_grammar.py',120),
  ('E -> N','E',1,'p_E0','logic_grammar.py',121),
  ('E -> var','E',1,'p_E0','logic_grammar.py',122),
  ('E -> ( E )','E',3,'p_E0','logic_grammar.py',123),
  ('E -> var ( arg_list )','E',4,'p_E1','logic_grammar.py',130),
  ('E -> var ( )','E',3,'p_E1','logic_grammar.py',131),
]
