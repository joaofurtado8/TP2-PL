
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftoulefteleft<>left+-left*/cosFim Inicio atribui caracter cos e ellipsis entao escreva falso fim_se inteiro leia logico nao nr ou real se sen senao string var verdadeiro axioma : Inicio code Fim code : S code : code ';' S S : C condicao : se E entao c_list senao c_list fim_se  C : e\n              | condicao C : escreva '(' e_list ')' ';'C : leia '(' var ')' ';' C : var atribui E ';' A : inteiro ':' var ';'A : real ':' var ';'A : logico ':' var ';'A : caracter ':' var ';' e_list : E\n                   | string  e_list : e_list ',' E\n                   | e_list ',' string N : nr N : E '+' E\n             | E '-' E\n             | E '*' E\n             | E '/' E\n             | E '<' E\n             | E '>' EN : cos '(' E ')'N : sen '(' E ')'B : FB : E e E\n             | E ou E F : verdadeiro  F : falso  F : nao F\n              | nao var arg_list : E\n                     | arg_list ',' E  E : varE : B\n             | N\n             | string\n             | '(' E ')'\n              E : var '(' arg_list ')'\n              | var '(' ')'  var_list : var\n                     | var_list ',' var  c_list : C\n                     | c_list ';' C  args :\n                 | var_list "
    
_lr_action_items = {'Inicio':([0,],[2,]),'$end':([1,12,],[0,-1,]),'e':([2,13,17,18,19,20,21,23,24,27,28,32,33,35,36,46,49,50,57,58,59,60,61,62,63,64,66,67,68,69,70,72,73,75,76,77,79,80,83,],[6,6,37,-37,-38,-39,-40,-28,-19,-31,-32,37,-40,37,6,37,-33,-34,-29,37,-20,-21,-22,-23,-24,-25,-43,37,-41,37,37,37,-40,6,6,-42,-26,-27,37,]),'escreva':([2,13,36,75,76,],[8,8,8,8,8,]),'leia':([2,13,36,75,76,],[9,9,9,9,9,]),'var':([2,11,13,14,15,16,22,29,36,37,38,39,40,41,42,43,44,45,47,48,52,75,76,78,],[10,18,10,18,34,18,18,50,10,18,18,18,18,18,18,18,18,18,18,18,18,10,10,18,]),'se':([2,13,36,75,76,],[11,11,11,11,11,]),'Fim':([3,4,5,6,7,30,54,71,74,84,],[12,-2,-4,-6,-7,-3,-10,-8,-9,-5,]),';':([3,4,5,6,7,18,19,20,21,23,24,27,28,30,35,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,66,68,71,74,77,79,80,81,82,84,],[13,-2,-4,-6,-7,-37,-38,-39,-40,-28,-19,-31,-32,-3,54,-33,-34,71,74,-10,76,-46,-29,-30,-20,-21,-22,-23,-24,-25,-43,-41,-8,-9,-42,-26,-27,76,-47,-5,]),'senao':([6,7,54,55,56,71,74,82,84,],[-6,-7,-10,75,-46,-8,-9,-47,-5,]),'fim_se':([6,7,54,56,71,74,81,82,84,],[-6,-7,-10,-46,-8,-9,84,-47,-5,]),'(':([8,9,11,14,16,18,22,25,26,37,38,39,40,41,42,43,44,45,47,48,52,78,],[14,15,22,22,22,45,22,47,48,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'atribui':([10,],[16,]),'string':([11,14,16,22,37,38,39,40,41,42,43,44,45,47,48,52,78,],[21,33,21,21,21,21,21,21,21,21,21,21,21,21,21,73,21,]),'nr':([11,14,16,22,37,38,39,40,41,42,43,44,45,47,48,52,78,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'cos':([11,14,16,22,37,38,39,40,41,42,43,44,45,47,48,52,78,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'sen':([11,14,16,22,37,38,39,40,41,42,43,44,45,47,48,52,78,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'verdadeiro':([11,14,16,22,29,37,38,39,40,41,42,43,44,45,47,48,52,78,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'falso':([11,14,16,22,29,37,38,39,40,41,42,43,44,45,47,48,52,78,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'nao':([11,14,16,22,29,37,38,39,40,41,42,43,44,45,47,48,52,78,],[29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'entao':([17,18,19,20,21,23,24,27,28,49,50,57,58,59,60,61,62,63,64,66,68,77,79,80,],[36,-37,-38,-39,-40,-28,-19,-31,-32,-33,-34,-29,-30,-20,-21,-22,-23,-24,-25,-43,-41,-42,-26,-27,]),'ou':([17,18,19,20,21,23,24,27,28,32,33,35,46,49,50,57,58,59,60,61,62,63,64,66,67,68,69,70,72,73,77,79,80,83,],[38,-37,-38,-39,-40,-28,-19,-31,-32,38,-40,38,38,-33,-34,-29,-30,-20,-21,-22,-23,-24,-25,-43,38,-41,38,38,38,-40,-42,-26,-27,38,]),'+':([17,18,19,20,21,23,24,27,28,32,33,35,46,49,50,57,58,59,60,61,62,63,64,66,67,68,69,70,72,73,77,79,80,83,],[39,-37,-38,-39,-40,-28,-19,-31,-32,39,-40,39,39,-33,-34,39,39,-20,-21,-22,-23,39,39,-43,39,-41,39,39,39,-40,-42,-26,-27,39,]),'-':([17,18,19,20,21,23,24,27,28,32,33,35,46,49,50,57,58,59,60,61,62,63,64,66,67,68,69,70,72,73,77,79,80,83,],[40,-37,-38,-39,-40,-28,-19,-31,-32,40,-40,40,40,-33,-34,40,40,-20,-21,-22,-23,40,40,-43,40,-41,40,40,40,-40,-42,-26,-27,40,]),'*':([17,18,19,20,21,23,24,27,28,32,33,35,46,49,50,57,58,59,60,61,62,63,64,66,67,68,69,70,72,73,77,79,80,83,],[41,-37,-38,-39,-40,-28,-19,-31,-32,41,-40,41,41,-33,-34,41,41,41,41,-22,-23,41,41,-43,41,-41,41,41,41,-40,-42,-26,-27,41,]),'/':([17,18,19,20,21,23,24,27,28,32,33,35,46,49,50,57,58,59,60,61,62,63,64,66,67,68,69,70,72,73,77,79,80,83,],[42,-37,-38,-39,-40,-28,-19,-31,-32,42,-40,42,42,-33,-34,42,42,42,42,-22,-23,42,42,-43,42,-41,42,42,42,-40,-42,-26,-27,42,]),'<':([17,18,19,20,21,23,24,27,28,32,33,35,46,49,50,57,58,59,60,61,62,63,64,66,67,68,69,70,72,73,77,79,80,83,],[43,-37,-38,-39,-40,-28,-19,-31,-32,43,-40,43,43,-33,-34,43,43,-20,-21,-22,-23,-24,-25,-43,43,-41,43,43,43,-40,-42,-26,-27,43,]),'>':([17,18,19,20,21,23,24,27,28,32,33,35,46,49,50,57,58,59,60,61,62,63,64,66,67,68,69,70,72,73,77,79,80,83,],[44,-37,-38,-39,-40,-28,-19,-31,-32,44,-40,44,44,-33,-34,44,44,-20,-21,-22,-23,-24,-25,-43,44,-41,44,44,44,-40,-42,-26,-27,44,]),')':([18,19,20,21,23,24,27,28,31,32,33,34,45,46,49,50,57,58,59,60,61,62,63,64,65,66,67,68,69,70,72,73,77,79,80,83,],[-37,-38,-39,-40,-28,-19,-31,-32,51,-15,-16,53,66,68,-33,-34,-29,-30,-20,-21,-22,-23,-24,-25,77,-43,-35,-41,79,80,-17,-18,-42,-26,-27,-36,]),',':([18,19,20,21,23,24,27,28,31,32,33,49,50,57,58,59,60,61,62,63,64,65,66,67,68,72,73,77,79,80,83,],[-37,-38,-39,-40,-28,-19,-31,-32,52,-15,-16,-33,-34,-29,-30,-20,-21,-22,-23,-24,-25,78,-43,-35,-41,-17,-18,-42,-26,-27,-36,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'axioma':([0,],[1,]),'code':([2,],[3,]),'S':([2,13,],[4,30,]),'C':([2,13,36,75,76,],[5,5,56,56,82,]),'condicao':([2,13,36,75,76,],[7,7,7,7,7,]),'E':([11,14,16,22,37,38,39,40,41,42,43,44,45,47,48,52,78,],[17,32,35,46,57,58,59,60,61,62,63,64,67,69,70,72,83,]),'B':([11,14,16,22,37,38,39,40,41,42,43,44,45,47,48,52,78,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'N':([11,14,16,22,37,38,39,40,41,42,43,44,45,47,48,52,78,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'F':([11,14,16,22,29,37,38,39,40,41,42,43,44,45,47,48,52,78,],[23,23,23,23,49,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'e_list':([14,],[31,]),'c_list':([36,75,],[55,81,]),'arg_list':([45,],[65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> axioma","S'",1,None,None,None),
  ('axioma -> Inicio code Fim','axioma',3,'p_axioma0','logic_grammar.py',27),
  ('code -> S','code',1,'p_code0','logic_grammar.py',31),
  ('code -> code ; S','code',3,'p_code1','logic_grammar.py',35),
  ('S -> C','S',1,'p_s','logic_grammar.py',40),
  ('condicao -> se E entao c_list senao c_list fim_se','condicao',7,'p_condicao','logic_grammar.py',44),
  ('C -> e','C',1,'p_c10','logic_grammar.py',52),
  ('C -> condicao','C',1,'p_c10','logic_grammar.py',53),
  ('C -> escreva ( e_list ) ;','C',5,'p_c0','logic_grammar.py',57),
  ('C -> leia ( var ) ;','C',5,'p_c1','logic_grammar.py',61),
  ('C -> var atribui E ;','C',4,'p_c2','logic_grammar.py',65),
  ('A -> inteiro : var ;','A',4,'p_a4','logic_grammar.py',72),
  ('A -> real : var ;','A',4,'p_a5','logic_grammar.py',76),
  ('A -> logico : var ;','A',4,'p_a6','logic_grammar.py',80),
  ('A -> caracter : var ;','A',4,'p_a7','logic_grammar.py',84),
  ('e_list -> E','e_list',1,'p_elist0','logic_grammar.py',88),
  ('e_list -> string','e_list',1,'p_elist0','logic_grammar.py',89),
  ('e_list -> e_list , E','e_list',3,'p_elist','logic_grammar.py',93),
  ('e_list -> e_list , string','e_list',3,'p_elist','logic_grammar.py',94),
  ('N -> nr','N',1,'p_n1','logic_grammar.py',99),
  ('N -> E + E','N',3,'p_n2','logic_grammar.py',103),
  ('N -> E - E','N',3,'p_n2','logic_grammar.py',104),
  ('N -> E * E','N',3,'p_n2','logic_grammar.py',105),
  ('N -> E / E','N',3,'p_n2','logic_grammar.py',106),
  ('N -> E < E','N',3,'p_n2','logic_grammar.py',107),
  ('N -> E > E','N',3,'p_n2','logic_grammar.py',108),
  ('N -> cos ( E )','N',4,'p_n3','logic_grammar.py',112),
  ('N -> sen ( E )','N',4,'p_n4','logic_grammar.py',116),
  ('B -> F','B',1,'p_b0','logic_grammar.py',120),
  ('B -> E e E','B',3,'p_b1','logic_grammar.py',124),
  ('B -> E ou E','B',3,'p_b1','logic_grammar.py',125),
  ('F -> verdadeiro','F',1,'p_f1','logic_grammar.py',129),
  ('F -> falso','F',1,'p_f2','logic_grammar.py',133),
  ('F -> nao F','F',2,'p_f3','logic_grammar.py',137),
  ('F -> nao var','F',2,'p_f3','logic_grammar.py',138),
  ('arg_list -> E','arg_list',1,'p_arg_list','logic_grammar.py',159),
  ('arg_list -> arg_list , E','arg_list',3,'p_arg_list','logic_grammar.py',160),
  ('E -> var','E',1,'p_E0','logic_grammar.py',168),
  ('E -> B','E',1,'p_E1','logic_grammar.py',172),
  ('E -> N','E',1,'p_E1','logic_grammar.py',173),
  ('E -> string','E',1,'p_E1','logic_grammar.py',174),
  ('E -> ( E )','E',3,'p_E1','logic_grammar.py',175),
  ('E -> var ( arg_list )','E',4,'p_E2','logic_grammar.py',183),
  ('E -> var ( )','E',3,'p_E2','logic_grammar.py',184),
  ('var_list -> var','var_list',1,'p_var_list','logic_grammar.py',190),
  ('var_list -> var_list , var','var_list',3,'p_var_list','logic_grammar.py',191),
  ('c_list -> C','c_list',1,'p_c_list','logic_grammar.py',199),
  ('c_list -> c_list ; C','c_list',3,'p_c_list','logic_grammar.py',200),
  ('args -> <empty>','args',0,'p_args','logic_grammar.py',208),
  ('args -> var_list','args',1,'p_args','logic_grammar.py',209),
]
